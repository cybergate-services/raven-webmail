
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, a as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, b as svg_element, c as attr_dev, e as add_location, f as insert_dev, g as append_dev, n as noop, h as detach_dev, j as assign, T as TextField, k as binding_callbacks, l as bind, B as Button, m as element, o as create_component, p as space, q as mount_component, r as run_all, t as listen_dev, w as prevent_default, x as get_spread_update, y as get_spread_object, z as add_flush_callback, A as group_outros, C as transition_out, D as check_outros, E as transition_in, F as destroy_component, G as bubble, H as globals, I as xe, J as getContext, K as validate_store, L as component_subscribe, M as getNotifier, N as login, O as text, P as set_data_dev } from './main-048546a6.js';

/* node_modules/svelte-material-icons/Eye.svelte generated by Svelte v3.21.0 */

const file = "node_modules/svelte-material-icons/Eye.svelte";

function create_fragment(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M12,9A3,3 0 0,0 9,12A3,3 0 0,0 12,15A3,3 0 0,0 15,12A3,3 0 0,0 12,9M12,17A5,5 0 0,1 7,12A5,5 0 0,1 12,7A5,5 0 0,1 17,12A5,5 0 0,1 12,17M12,4.5C7,4.5 2.73,7.61 1,12C2.73,16.39 7,19.5 12,19.5C17,19.5 21.27,16.39 23,12C21.27,7.61 17,4.5 12,4.5Z");
			attr_dev(path, "fill", /*color*/ ctx[2]);
			add_location(path, file, 8, 59, 234);
			attr_dev(svg, "width", /*width*/ ctx[0]);
			attr_dev(svg, "height", /*height*/ ctx[1]);
			attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			add_location(svg, file, 8, 0, 175);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*color*/ 4) {
				attr_dev(path, "fill", /*color*/ ctx[2]);
			}

			if (dirty & /*width*/ 1) {
				attr_dev(svg, "width", /*width*/ ctx[0]);
			}

			if (dirty & /*height*/ 2) {
				attr_dev(svg, "height", /*height*/ ctx[1]);
			}

			if (dirty & /*viewBox*/ 8) {
				attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { size = "1em" } = $$props;
	let { width = size } = $$props;
	let { height = size } = $$props;
	let { color = "currentColor" } = $$props;
	let { viewBox = "0 0 24 24" } = $$props;
	const writable_props = ["size", "width", "height", "color", "viewBox"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Eye> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Eye", $$slots, []);

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	$$self.$capture_state = () => ({ size, width, height, color, viewBox });

	$$self.$inject_state = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [width, height, color, viewBox, size];
}

class Eye extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			size: 4,
			width: 0,
			height: 1,
			color: 2,
			viewBox: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Eye",
			options,
			id: create_fragment.name
		});
	}

	get size() {
		throw new Error("<Eye>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Eye>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<Eye>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Eye>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<Eye>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<Eye>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<Eye>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<Eye>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get viewBox() {
		throw new Error("<Eye>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set viewBox(value) {
		throw new Error("<Eye>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/svelte-material-icons/EyeOff.svelte generated by Svelte v3.21.0 */

const file$1 = "node_modules/svelte-material-icons/EyeOff.svelte";

function create_fragment$1(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M11.83,9L15,12.16C15,12.11 15,12.05 15,12A3,3 0 0,0 12,9C11.94,9 11.89,9 11.83,9M7.53,9.8L9.08,11.35C9.03,11.56 9,11.77 9,12A3,3 0 0,0 12,15C12.22,15 12.44,14.97 12.65,14.92L14.2,16.47C13.53,16.8 12.79,17 12,17A5,5 0 0,1 7,12C7,11.21 7.2,10.47 7.53,9.8M2,4.27L4.28,6.55L4.73,7C3.08,8.3 1.78,10 1,12C2.73,16.39 7,19.5 12,19.5C13.55,19.5 15.03,19.2 16.38,18.66L16.81,19.08L19.73,22L21,20.73L3.27,3M12,7A5,5 0 0,1 17,12C17,12.64 16.87,13.26 16.64,13.82L19.57,16.75C21.07,15.5 22.27,13.86 23,12C21.27,7.61 17,4.5 12,4.5C10.6,4.5 9.26,4.75 8,5.2L10.17,7.35C10.74,7.13 11.35,7 12,7Z");
			attr_dev(path, "fill", /*color*/ ctx[2]);
			add_location(path, file$1, 8, 59, 234);
			attr_dev(svg, "width", /*width*/ ctx[0]);
			attr_dev(svg, "height", /*height*/ ctx[1]);
			attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			add_location(svg, file$1, 8, 0, 175);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*color*/ 4) {
				attr_dev(path, "fill", /*color*/ ctx[2]);
			}

			if (dirty & /*width*/ 1) {
				attr_dev(svg, "width", /*width*/ ctx[0]);
			}

			if (dirty & /*height*/ 2) {
				attr_dev(svg, "height", /*height*/ ctx[1]);
			}

			if (dirty & /*viewBox*/ 8) {
				attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { size = "1em" } = $$props;
	let { width = size } = $$props;
	let { height = size } = $$props;
	let { color = "currentColor" } = $$props;
	let { viewBox = "0 0 24 24" } = $$props;
	const writable_props = ["size", "width", "height", "color", "viewBox"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<EyeOff> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("EyeOff", $$slots, []);

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	$$self.$capture_state = () => ({ size, width, height, color, viewBox });

	$$self.$inject_state = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [width, height, color, viewBox, size];
}

class EyeOff extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			size: 4,
			width: 0,
			height: 1,
			color: 2,
			viewBox: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "EyeOff",
			options,
			id: create_fragment$1.name
		});
	}

	get size() {
		throw new Error("<EyeOff>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<EyeOff>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<EyeOff>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<EyeOff>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<EyeOff>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<EyeOff>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<EyeOff>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<EyeOff>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get viewBox() {
		throw new Error("<EyeOff>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set viewBox(value) {
		throw new Error("<EyeOff>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/comp/Password.svelte generated by Svelte v3.21.0 */
const file$2 = "src/comp/Password.svelte";

// (63:4) {:else}
function create_else_block(ctx) {
	let current;
	const visibilityoff = new EyeOff({ $$inline: true });

	const block = {
		c: function create() {
			create_component(visibilityoff.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(visibilityoff, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(visibilityoff.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(visibilityoff.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(visibilityoff, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(63:4) {:else}",
		ctx
	});

	return block;
}

// (61:4) {#if visible}
function create_if_block(ctx) {
	let current;
	const visibilityon = new Eye({ $$inline: true });

	const block = {
		c: function create() {
			create_component(visibilityon.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(visibilityon, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(visibilityon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(visibilityon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(visibilityon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(61:4) {#if visible}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div1;
	let updating_value;
	let t;
	let div0;
	let current_block_type_index;
	let if_block;
	let div1_class_value;
	let current;
	let dispose;
	const textfield_spread_levels = [/*textFieldProps*/ ctx[1], { id: /*id*/ ctx[4] }, { name: /*name*/ ctx[5] }];

	function textfield_value_binding(value) {
		/*textfield_value_binding*/ ctx[9].call(null, value);
	}

	let textfield_props = {};

	for (let i = 0; i < textfield_spread_levels.length; i += 1) {
		textfield_props = assign(textfield_props, textfield_spread_levels[i]);
	}

	if (/*value*/ ctx[0] !== void 0) {
		textfield_props.value = /*value*/ ctx[0];
	}

	const textfield = new TextField({ props: textfield_props, $$inline: true });
	binding_callbacks.push(() => bind(textfield, "value", textfield_value_binding));
	textfield.$on("input", /*input_handler*/ ctx[10]);
	textfield.$on("focus", /*focus_handler*/ ctx[11]);
	textfield.$on("blur", /*blur_handler*/ ctx[12]);
	textfield.$on("change", /*change_handler*/ ctx[13]);
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*visible*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			create_component(textfield.$$.fragment);
			t = space();
			div0 = element("div");
			if_block.c();
			attr_dev(div0, "class", "icon svelte-14db2l8");
			add_location(div0, file$2, 59, 2, 1175);
			attr_dev(div1, "class", div1_class_value = "password " + /*className*/ ctx[3] + " svelte-14db2l8");
			add_location(div1, file$2, 50, 0, 1028);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div1, anchor);
			mount_component(textfield, div1, null);
			append_dev(div1, t);
			append_dev(div1, div0);
			if_blocks[current_block_type_index].m(div0, null);
			current = true;
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div0, "mousedown", prevent_default(/*mousedown_handler*/ ctx[8]), false, true, false),
				listen_dev(div0, "click", prevent_default(/*toggle*/ ctx[6]), false, true, false)
			];
		},
		p: function update(ctx, [dirty]) {
			const textfield_changes = (dirty & /*textFieldProps, id, name*/ 50)
			? get_spread_update(textfield_spread_levels, [
					dirty & /*textFieldProps*/ 2 && get_spread_object(/*textFieldProps*/ ctx[1]),
					dirty & /*id*/ 16 && { id: /*id*/ ctx[4] },
					dirty & /*name*/ 32 && { name: /*name*/ ctx[5] }
				])
			: {};

			if (!updating_value && dirty & /*value*/ 1) {
				updating_value = true;
				textfield_changes.value = /*value*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			textfield.$set(textfield_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(div0, null);
			}

			if (!current || dirty & /*className*/ 8 && div1_class_value !== (div1_class_value = "password " + /*className*/ ctx[3] + " svelte-14db2l8")) {
				attr_dev(div1, "class", div1_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textfield.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(textfield.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(textfield);
			if_blocks[current_block_type_index].d();
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { class: className = "" } = $$props;
	let { value = "" } = $$props;
	let { textFieldProps = {} } = $$props;
	let { visible = false } = $$props;
	let { label = void 0 } = $$props;
	let { id = void 0 } = $$props;
	let { name = void 0 } = $$props;
	const toggle = () => $$invalidate(2, visible = !visible);
	const writable_props = ["class", "value", "textFieldProps", "visible", "label", "id", "name"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Password> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Password", $$slots, []);

	function mousedown_handler(event) {
		bubble($$self, event);
	}

	function textfield_value_binding(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	function input_handler(event) {
		bubble($$self, event);
	}

	function focus_handler(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	function change_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$props => {
		if ("class" in $$props) $$invalidate(3, className = $$props.class);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
		if ("textFieldProps" in $$props) $$invalidate(1, textFieldProps = $$props.textFieldProps);
		if ("visible" in $$props) $$invalidate(2, visible = $$props.visible);
		if ("label" in $$props) $$invalidate(7, label = $$props.label);
		if ("id" in $$props) $$invalidate(4, id = $$props.id);
		if ("name" in $$props) $$invalidate(5, name = $$props.name);
	};

	$$self.$capture_state = () => ({
		TextField,
		Button,
		VisibilityOn: Eye,
		VisibilityOff: EyeOff,
		className,
		value,
		textFieldProps,
		visible,
		label,
		id,
		name,
		toggle
	});

	$$self.$inject_state = $$props => {
		if ("className" in $$props) $$invalidate(3, className = $$props.className);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
		if ("textFieldProps" in $$props) $$invalidate(1, textFieldProps = $$props.textFieldProps);
		if ("visible" in $$props) $$invalidate(2, visible = $$props.visible);
		if ("label" in $$props) $$invalidate(7, label = $$props.label);
		if ("id" in $$props) $$invalidate(4, id = $$props.id);
		if ("name" in $$props) $$invalidate(5, name = $$props.name);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*visible*/ 4) {
			 $$invalidate(1, textFieldProps.type = visible ? "text" : "password", textFieldProps);
		}

		if ($$self.$$.dirty & /*label*/ 128) {
			 label != null && $$invalidate(1, textFieldProps.label = label, textFieldProps);
		}
	};

	return [
		value,
		textFieldProps,
		visible,
		className,
		id,
		name,
		toggle,
		label,
		mousedown_handler,
		textfield_value_binding,
		input_handler,
		focus_handler,
		blur_handler,
		change_handler
	];
}

class Password extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			class: 3,
			value: 0,
			textFieldProps: 1,
			visible: 2,
			label: 7,
			id: 4,
			name: 5,
			toggle: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Password",
			options,
			id: create_fragment$2.name
		});
	}

	get class() {
		throw new Error("<Password>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Password>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Password>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Password>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get textFieldProps() {
		throw new Error("<Password>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set textFieldProps(value) {
		throw new Error("<Password>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<Password>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<Password>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Password>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Password>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Password>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Password>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error("<Password>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Password>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get toggle() {
		return this.$$.ctx[6];
	}

	set toggle(value) {
		throw new Error("<Password>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/lib/router/routes/Login.svelte generated by Svelte v3.21.0 */

const { Error: Error_1 } = globals;
const file$3 = "src/lib/router/routes/Login.svelte";

// (83:4) <Button color="var(--pc)" raised>
function create_default_slot(ctx) {
	let t_value = /*locale*/ ctx[0].action + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*locale*/ 1 && t_value !== (t_value = /*locale*/ ctx[0].action + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(83:4) <Button color=\\\"var(--pc)\\\" raised>",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let title_value;
	let t0;
	let h1;
	let t1_value = /*locale*/ ctx[0].title + "";
	let t1;
	let t2;
	let form;
	let div0;
	let updating_value;
	let t3;
	let div1;
	let updating_value_1;
	let t4;
	let div2;
	let current;
	let dispose;
	document.title = title_value = /*locale*/ ctx[0].title;

	function textfield_value_binding(value) {
		/*textfield_value_binding*/ ctx[6].call(null, value);
	}

	let textfield_props = {
		name: "username",
		label: /*locale*/ ctx[0].labels.username
	};

	if (/*username*/ ctx[1] !== void 0) {
		textfield_props.value = /*username*/ ctx[1];
	}

	const textfield = new TextField({ props: textfield_props, $$inline: true });
	binding_callbacks.push(() => bind(textfield, "value", textfield_value_binding));

	function password_1_value_binding(value) {
		/*password_1_value_binding*/ ctx[7].call(null, value);
	}

	let password_1_props = {
		name: "password",
		label: /*locale*/ ctx[0].labels.password
	};

	if (/*password*/ ctx[2] !== void 0) {
		password_1_props.value = /*password*/ ctx[2];
	}

	const password_1 = new Password({ props: password_1_props, $$inline: true });
	binding_callbacks.push(() => bind(password_1, "value", password_1_value_binding));

	const button = new xe({
			props: {
				color: "var(--pc)",
				raised: true,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text(t1_value);
			t2 = space();
			form = element("form");
			div0 = element("div");
			create_component(textfield.$$.fragment);
			t3 = space();
			div1 = element("div");
			create_component(password_1.$$.fragment);
			t4 = space();
			div2 = element("div");
			create_component(button.$$.fragment);
			attr_dev(h1, "class", "svelte-10shc8e");
			add_location(h1, file$3, 73, 0, 1476);
			attr_dev(div0, "class", "field svelte-10shc8e");
			add_location(div0, file$3, 75, 2, 1566);
			attr_dev(div1, "class", "field svelte-10shc8e");
			add_location(div1, file$3, 78, 2, 1683);
			attr_dev(div2, "class", "button svelte-10shc8e");
			add_location(div2, file$3, 81, 2, 1799);
			attr_dev(form, "action", "#!/login");
			attr_dev(form, "method", "post");
			attr_dev(form, "class", "svelte-10shc8e");
			add_location(form, file$3, 74, 0, 1500);
		},
		l: function claim(nodes) {
			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, form, anchor);
			append_dev(form, div0);
			mount_component(textfield, div0, null);
			append_dev(form, t3);
			append_dev(form, div1);
			mount_component(password_1, div1, null);
			append_dev(form, t4);
			append_dev(form, div2);
			mount_component(button, div2, null);
			current = true;
			if (remount) dispose();
			dispose = listen_dev(form, "submit", /*handleSubmit*/ ctx[3], false, false, false);
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*locale*/ 1) && title_value !== (title_value = /*locale*/ ctx[0].title)) {
				document.title = title_value;
			}

			if ((!current || dirty & /*locale*/ 1) && t1_value !== (t1_value = /*locale*/ ctx[0].title + "")) set_data_dev(t1, t1_value);
			const textfield_changes = {};
			if (dirty & /*locale*/ 1) textfield_changes.label = /*locale*/ ctx[0].labels.username;

			if (!updating_value && dirty & /*username*/ 2) {
				updating_value = true;
				textfield_changes.value = /*username*/ ctx[1];
				add_flush_callback(() => updating_value = false);
			}

			textfield.$set(textfield_changes);
			const password_1_changes = {};
			if (dirty & /*locale*/ 1) password_1_changes.label = /*locale*/ ctx[0].labels.password;

			if (!updating_value_1 && dirty & /*password*/ 4) {
				updating_value_1 = true;
				password_1_changes.value = /*password*/ ctx[2];
				add_flush_callback(() => updating_value_1 = false);
			}

			password_1.$set(password_1_changes);
			const button_changes = {};

			if (dirty & /*$$scope, locale*/ 257) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textfield.$$.fragment, local);
			transition_in(password_1.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textfield.$$.fragment, local);
			transition_out(password_1.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(form);
			destroy_component(textfield);
			destroy_component(password_1);
			destroy_component(button);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let $l;
	let username = "";
	let password = "";

	const handleSubmit = async event => {
		event.preventDefault();

		try {
			const user = await fetch("/login", {
				method: "POST",
				headers: { "content-type": "application/json" },
				body: JSON.stringify({ username, password })
			}).then(res => res.json());

			if (user.error) {
				throw new Error(user.error.message);
			}

			location.href = "/";
		} catch(e) {
			getNotifier().add({ variant: "error", text: e.message });
		}
	};

	const { locale: l } = getContext("app");
	validate_store(l, "l");
	component_subscribe($$self, l, value => $$invalidate(5, $l = value));
	let { locale = $l.login } = $$props;
	const writable_props = ["locale"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Login> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Login", $$slots, []);

	function textfield_value_binding(value) {
		username = value;
		$$invalidate(1, username);
	}

	function password_1_value_binding(value) {
		password = value;
		$$invalidate(2, password);
	}

	$$self.$set = $$props => {
		if ("locale" in $$props) $$invalidate(0, locale = $$props.locale);
	};

	$$self.$capture_state = () => ({
		getContext,
		TextField,
		Password,
		Button: xe,
		getNotifier,
		username,
		password,
		login,
		handleSubmit,
		l,
		locale,
		$l
	});

	$$self.$inject_state = $$props => {
		if ("username" in $$props) $$invalidate(1, username = $$props.username);
		if ("password" in $$props) $$invalidate(2, password = $$props.password);
		if ("locale" in $$props) $$invalidate(0, locale = $$props.locale);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		locale,
		username,
		password,
		handleSubmit,
		l,
		$l,
		textfield_value_binding,
		password_1_value_binding
	];
}

class Login extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { locale: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Login",
			options,
			id: create_fragment$3.name
		});
	}

	get locale() {
		throw new Error_1("<Login>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set locale(value) {
		throw new Error_1("<Login>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Login;
//# sourceMappingURL=Login-82efa600.js.map
