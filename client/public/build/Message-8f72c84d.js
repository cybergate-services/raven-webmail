
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, a as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, b as svg_element, c as attr_dev, e as add_location, f as insert_dev, g as append_dev, n as noop, h as detach_dev, aE as Menu, K as validate_store, U as subscribe, J as getContext, aG as Paperclip, R as ge, aD as Nn, aH as url, ah as validate_each_argument, o as create_component, q as mount_component, E as transition_in, C as transition_out, F as destroy_component, m as element, O as text, a0 as set_custom_element_data, P as set_data_dev, p as space, ao as empty, A as group_outros, D as check_outros, aF as destroy_each, L as component_subscribe, Q as writable, a9 as Delete, aa as MarkSpam, aI as sanitize, Y as create, $ as messages, aJ as mailboxes, ac as junk, ad as trash, Z as drafts, _ as sent, aj as updateSeen, ak as markAsSpam, al as _del, aK as createReply, aL as createForward, t as listen_dev, r as run_all, aM as HtmlTag, u as user, aw as _get, aN as _get$1 } from './main-048546a6.js';
import { T as Tab, a as Topbar, M as MarkUnseen, b as MarkSeen, U as UnMarkSpam, R as Resend, c as Reply, d as MoveTo } from './MoveTo-af9af642.js';

/* node_modules/svelte-material-icons/ArrowLeft.svelte generated by Svelte v3.21.0 */

const file = "node_modules/svelte-material-icons/ArrowLeft.svelte";

function create_fragment(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z");
			attr_dev(path, "fill", /*color*/ ctx[2]);
			add_location(path, file, 8, 59, 234);
			attr_dev(svg, "width", /*width*/ ctx[0]);
			attr_dev(svg, "height", /*height*/ ctx[1]);
			attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			add_location(svg, file, 8, 0, 175);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*color*/ 4) {
				attr_dev(path, "fill", /*color*/ ctx[2]);
			}

			if (dirty & /*width*/ 1) {
				attr_dev(svg, "width", /*width*/ ctx[0]);
			}

			if (dirty & /*height*/ 2) {
				attr_dev(svg, "height", /*height*/ ctx[1]);
			}

			if (dirty & /*viewBox*/ 8) {
				attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { size = "1em" } = $$props;
	let { width = size } = $$props;
	let { height = size } = $$props;
	let { color = "currentColor" } = $$props;
	let { viewBox = "0 0 24 24" } = $$props;
	const writable_props = ["size", "width", "height", "color", "viewBox"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ArrowLeft> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("ArrowLeft", $$slots, []);

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	$$self.$capture_state = () => ({ size, width, height, color, viewBox });

	$$self.$inject_state = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [width, height, color, viewBox, size];
}

class ArrowLeft extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			size: 4,
			width: 0,
			height: 1,
			color: 2,
			viewBox: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ArrowLeft",
			options,
			id: create_fragment.name
		});
	}

	get size() {
		throw new Error("<ArrowLeft>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<ArrowLeft>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<ArrowLeft>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<ArrowLeft>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<ArrowLeft>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<ArrowLeft>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<ArrowLeft>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<ArrowLeft>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get viewBox() {
		throw new Error("<ArrowLeft>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set viewBox(value) {
		throw new Error("<ArrowLeft>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/comp/Attachments/Attachments.svelte generated by Svelte v3.21.0 */
const file$1 = "src/comp/Attachments/Attachments.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (49:4) {#if attachments.length}
function create_if_block(ctx) {
	let x_count;
	let t_value = /*attachments*/ ctx[2].length + "";
	let t;

	const block = {
		c: function create() {
			x_count = element("x-count");
			t = text(t_value);
			set_custom_element_data(x_count, "class", "svelte-d56671");
			add_location(x_count, file$1, 49, 6, 1009);
		},
		m: function mount(target, anchor) {
			insert_dev(target, x_count, anchor);
			append_dev(x_count, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*attachments*/ 4 && t_value !== (t_value = /*attachments*/ ctx[2].length + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_count);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(49:4) {#if attachments.length}",
		ctx
	});

	return block;
}

// (46:2) <x-action slot="activator" class="btn-dark" data-tooltip="Archivos adjuntos">
function create_activator_slot(ctx) {
	let x_action;
	let t0;
	let t1;
	let current;
	const paperclip = new Paperclip({ $$inline: true });
	const ripple = new ge({ $$inline: true });
	let if_block = /*attachments*/ ctx[2].length && create_if_block(ctx);

	const block = {
		c: function create() {
			x_action = element("x-action");
			create_component(paperclip.$$.fragment);
			t0 = space();
			create_component(ripple.$$.fragment);
			t1 = space();
			if (if_block) if_block.c();
			set_custom_element_data(x_action, "slot", "activator");
			set_custom_element_data(x_action, "class", "btn-dark");
			set_custom_element_data(x_action, "data-tooltip", "Archivos adjuntos");
			add_location(x_action, file$1, 45, 2, 865);
		},
		m: function mount(target, anchor) {
			insert_dev(target, x_action, anchor);
			mount_component(paperclip, x_action, null);
			append_dev(x_action, t0);
			mount_component(ripple, x_action, null);
			append_dev(x_action, t1);
			if (if_block) if_block.m(x_action, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*attachments*/ ctx[2].length) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(x_action, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paperclip.$$.fragment, local);
			transition_in(ripple.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paperclip.$$.fragment, local);
			transition_out(ripple.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_action);
			destroy_component(paperclip);
			destroy_component(ripple);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_activator_slot.name,
		type: "slot",
		source: "(46:2) <x-action slot=\\\"activator\\\" class=\\\"btn-dark\\\" data-tooltip=\\\"Archivos adjuntos\\\">",
		ctx
	});

	return block;
}

// (55:4) <Menuitem href="/download/{$mailbox.id}/{$message.id}/{file.id}?filename={encodeURIComponent(file.filename)}" download target="_blank">
function create_default_slot_1(ctx) {
	let x_item;
	let img;
	let img_src_value;
	let t0;
	let t1_value = /*file*/ ctx[6].filename + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			x_item = element("x-item");
			img = element("img");
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			if (img.src !== (img_src_value = url(/*file*/ ctx[6].filename))) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "");
			attr_dev(img, "class", "svelte-d56671");
			add_location(img, file$1, 56, 8, 1267);
			set_custom_element_data(x_item, "class", "svelte-d56671");
			add_location(x_item, file$1, 55, 6, 1250);
		},
		m: function mount(target, anchor) {
			insert_dev(target, x_item, anchor);
			append_dev(x_item, img);
			append_dev(x_item, t0);
			append_dev(x_item, t1);
			insert_dev(target, t2, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*attachments*/ 4 && img.src !== (img_src_value = url(/*file*/ ctx[6].filename))) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*attachments*/ 4 && t1_value !== (t1_value = /*file*/ ctx[6].filename + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_item);
			if (detaching) detach_dev(t2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(55:4) <Menuitem href=\\\"/download/{$mailbox.id}/{$message.id}/{file.id}?filename={encodeURIComponent(file.filename)}\\\" download target=\\\"_blank\\\">",
		ctx
	});

	return block;
}

// (54:2) {#each attachments as file}
function create_each_block(ctx) {
	let current;

	const menuitem = new Nn({
			props: {
				href: "/download/" + /*$mailbox*/ ctx[3].id + "/" + /*$message*/ ctx[4].id + "/" + /*file*/ ctx[6].id + "?filename=" + encodeURIComponent(/*file*/ ctx[6].filename),
				download: true,
				target: "_blank",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(menuitem.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(menuitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const menuitem_changes = {};
			if (dirty & /*$mailbox, $message, attachments*/ 28) menuitem_changes.href = "/download/" + /*$mailbox*/ ctx[3].id + "/" + /*$message*/ ctx[4].id + "/" + /*file*/ ctx[6].id + "?filename=" + encodeURIComponent(/*file*/ ctx[6].filename);

			if (dirty & /*$$scope, attachments*/ 516) {
				menuitem_changes.$$scope = { dirty, ctx };
			}

			menuitem.$set(menuitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(menuitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(menuitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(menuitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(54:2) {#each attachments as file}",
		ctx
	});

	return block;
}

// (45:0) <Menu origin="top right">
function create_default_slot(ctx) {
	let t;
	let each_1_anchor;
	let current;
	let each_value = /*attachments*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$mailbox, $message, attachments, encodeURIComponent, url*/ 28) {
				each_value = /*attachments*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(45:0) <Menu origin=\\\"top right\\\">",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let current;

	const menu = new Menu({
			props: {
				origin: "top right",
				$$slots: {
					default: [create_default_slot],
					activator: [create_activator_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(menu.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(menu, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const menu_changes = {};

			if (dirty & /*$$scope, attachments, $mailbox, $message*/ 540) {
				menu_changes.$$scope = { dirty, ctx };
			}

			menu.$set(menu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(menu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(menu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(menu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let $mailbox,
		$$unsubscribe_mailbox = noop,
		$$subscribe_mailbox = () => ($$unsubscribe_mailbox(), $$unsubscribe_mailbox = subscribe(mailbox, $$value => $$invalidate(3, $mailbox = $$value)), mailbox);

	let $message,
		$$unsubscribe_message = noop,
		$$subscribe_message = () => ($$unsubscribe_message(), $$unsubscribe_message = subscribe(message, $$value => $$invalidate(4, $message = $$value)), message);

	$$self.$$.on_destroy.push(() => $$unsubscribe_mailbox());
	$$self.$$.on_destroy.push(() => $$unsubscribe_message());
	let { mailbox } = $$props;
	validate_store(mailbox, "mailbox");
	$$subscribe_mailbox();
	let { message } = $$props;
	validate_store(message, "message");
	$$subscribe_message();
	let { attachments } = $$props;
	const { trans } = getContext("app");
	const writable_props = ["mailbox", "message", "attachments"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Attachments> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Attachments", $$slots, []);

	$$self.$set = $$props => {
		if ("mailbox" in $$props) $$subscribe_mailbox($$invalidate(0, mailbox = $$props.mailbox));
		if ("message" in $$props) $$subscribe_message($$invalidate(1, message = $$props.message));
		if ("attachments" in $$props) $$invalidate(2, attachments = $$props.attachments);
	};

	$$self.$capture_state = () => ({
		mailbox,
		message,
		attachments,
		Paperclip,
		Ripple: ge,
		Menuitem: Nn,
		Menu,
		url,
		getContext,
		trans,
		$mailbox,
		$message
	});

	$$self.$inject_state = $$props => {
		if ("mailbox" in $$props) $$subscribe_mailbox($$invalidate(0, mailbox = $$props.mailbox));
		if ("message" in $$props) $$subscribe_message($$invalidate(1, message = $$props.message));
		if ("attachments" in $$props) $$invalidate(2, attachments = $$props.attachments);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [mailbox, message, attachments, $mailbox, $message];
}

class Attachments extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { mailbox: 0, message: 1, attachments: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Attachments",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*mailbox*/ ctx[0] === undefined && !("mailbox" in props)) {
			console.warn("<Attachments> was created without expected prop 'mailbox'");
		}

		if (/*message*/ ctx[1] === undefined && !("message" in props)) {
			console.warn("<Attachments> was created without expected prop 'message'");
		}

		if (/*attachments*/ ctx[2] === undefined && !("attachments" in props)) {
			console.warn("<Attachments> was created without expected prop 'attachments'");
		}
	}

	get mailbox() {
		throw new Error("<Attachments>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set mailbox(value) {
		throw new Error("<Attachments>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get message() {
		throw new Error("<Attachments>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set message(value) {
		throw new Error("<Attachments>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get attachments() {
		throw new Error("<Attachments>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set attachments(value) {
		throw new Error("<Attachments>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/comp/Pages/Message/Message.svelte generated by Svelte v3.21.0 */
const file$2 = "src/comp/Pages/Message/Message.svelte";

// (165:8) {:else}
function create_else_block_1(ctx) {
	let current;
	const markseen = new MarkSeen({ $$inline: true });

	const block = {
		c: function create() {
			create_component(markseen.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(markseen, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(markseen.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(markseen.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(markseen, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(165:8) {:else}",
		ctx
	});

	return block;
}

// (163:8) {#if $message.seen}
function create_if_block_10(ctx) {
	let current;
	const markunseen = new MarkUnseen({ $$inline: true });

	const block = {
		c: function create() {
			create_component(markunseen.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(markunseen, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(markunseen.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(markunseen.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(markunseen, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_10.name,
		type: "if",
		source: "(163:8) {#if $message.seen}",
		ctx
	});

	return block;
}

// (175:48) 
function create_if_block_9(ctx) {
	let x_action;
	let t;
	let x_action_data_tooltip_value;
	let current;
	let dispose;
	const markspam = new MarkSpam({ $$inline: true });
	const ripple = new ge({ $$inline: true });

	const block = {
		c: function create() {
			x_action = element("x-action");
			create_component(markspam.$$.fragment);
			t = space();
			create_component(ripple.$$.fragment);
			set_custom_element_data(x_action, "class", "btn-dark");
			set_custom_element_data(x_action, "data-tooltip", x_action_data_tooltip_value = /*locale*/ ctx[3].actions.markAsSpam);
			add_location(x_action, file$2, 175, 8, 4592);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, x_action, anchor);
			mount_component(markspam, x_action, null);
			append_dev(x_action, t);
			mount_component(ripple, x_action, null);
			current = true;
			if (remount) dispose();
			dispose = listen_dev(x_action, "click", /*spam*/ ctx[13], false, false, false);
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*locale*/ 8 && x_action_data_tooltip_value !== (x_action_data_tooltip_value = /*locale*/ ctx[3].actions.markAsSpam)) {
				set_custom_element_data(x_action, "data-tooltip", x_action_data_tooltip_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(markspam.$$.fragment, local);
			transition_in(ripple.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(markspam.$$.fragment, local);
			transition_out(ripple.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_action);
			destroy_component(markspam);
			destroy_component(ripple);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_9.name,
		type: "if",
		source: "(175:48) ",
		ctx
	});

	return block;
}

// (170:6) {#if isJunk}
function create_if_block_8(ctx) {
	let x_action;
	let t;
	let x_action_data_tooltip_value;
	let current;
	let dispose;
	const unmarkspam = new UnMarkSpam({ $$inline: true });
	const ripple = new ge({ $$inline: true });

	const block = {
		c: function create() {
			x_action = element("x-action");
			create_component(unmarkspam.$$.fragment);
			t = space();
			create_component(ripple.$$.fragment);
			set_custom_element_data(x_action, "class", "btn-dark");
			set_custom_element_data(x_action, "data-tooltip", x_action_data_tooltip_value = /*locale*/ ctx[3].actions.unMarkAsSpam);
			add_location(x_action, file$2, 170, 8, 4382);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, x_action, anchor);
			mount_component(unmarkspam, x_action, null);
			append_dev(x_action, t);
			mount_component(ripple, x_action, null);
			current = true;
			if (remount) dispose();
			dispose = listen_dev(x_action, "click", /*spam*/ ctx[13], false, false, false);
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*locale*/ 8 && x_action_data_tooltip_value !== (x_action_data_tooltip_value = /*locale*/ ctx[3].actions.unMarkAsSpam)) {
				set_custom_element_data(x_action, "data-tooltip", x_action_data_tooltip_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(unmarkspam.$$.fragment, local);
			transition_in(ripple.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(unmarkspam.$$.fragment, local);
			transition_out(ripple.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_action);
			destroy_component(unmarkspam);
			destroy_component(ripple);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(170:6) {#if isJunk}",
		ctx
	});

	return block;
}

// (198:6) {#if !isDraft && !isSent}
function create_if_block_7(ctx) {
	let x_action;
	let t;
	let x_action_data_tooltip_value;
	let current;
	let dispose;
	const reply_1 = new Reply({ $$inline: true });
	const ripple = new ge({ $$inline: true });

	const block = {
		c: function create() {
			x_action = element("x-action");
			create_component(reply_1.$$.fragment);
			t = space();
			create_component(ripple.$$.fragment);
			set_custom_element_data(x_action, "class", "btn-dark");
			set_custom_element_data(x_action, "data-tooltip", x_action_data_tooltip_value = /*locale*/ ctx[3].actions.reply);
			add_location(x_action, file$2, 198, 8, 5252);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, x_action, anchor);
			mount_component(reply_1, x_action, null);
			append_dev(x_action, t);
			mount_component(ripple, x_action, null);
			current = true;
			if (remount) dispose();
			dispose = listen_dev(x_action, "click", /*reply*/ ctx[15], false, false, false);
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*locale*/ 8 && x_action_data_tooltip_value !== (x_action_data_tooltip_value = /*locale*/ ctx[3].actions.reply)) {
				set_custom_element_data(x_action, "data-tooltip", x_action_data_tooltip_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(reply_1.$$.fragment, local);
			transition_in(ripple.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(reply_1.$$.fragment, local);
			transition_out(ripple.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_action);
			destroy_component(reply_1);
			destroy_component(ripple);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(198:6) {#if !isDraft && !isSent}",
		ctx
	});

	return block;
}

// (210:4) {#if $message.attachments && $message.attachments.length}
function create_if_block_6(ctx) {
	let x_action_group;
	let current;

	const attachments = new Attachments({
			props: {
				mailbox: /*mailbox*/ ctx[0],
				message: /*message*/ ctx[1],
				attachments: /*$message*/ ctx[5].attachments,
				tooltip: /*locale*/ ctx[3].actions.attachments
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			x_action_group = element("x-action-group");
			create_component(attachments.$$.fragment);
			add_location(x_action_group, file$2, 210, 6, 5651);
		},
		m: function mount(target, anchor) {
			insert_dev(target, x_action_group, anchor);
			mount_component(attachments, x_action_group, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const attachments_changes = {};
			if (dirty & /*mailbox*/ 1) attachments_changes.mailbox = /*mailbox*/ ctx[0];
			if (dirty & /*message*/ 2) attachments_changes.message = /*message*/ ctx[1];
			if (dirty & /*$message*/ 32) attachments_changes.attachments = /*$message*/ ctx[5].attachments;
			if (dirty & /*locale*/ 8) attachments_changes.tooltip = /*locale*/ ctx[3].actions.attachments;
			attachments.$set(attachments_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(attachments.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(attachments.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_action_group);
			destroy_component(attachments);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(210:4) {#if $message.attachments && $message.attachments.length}",
		ctx
	});

	return block;
}

// (148:2) <Topbar scrolled={$scroll !== 0}>
function create_default_slot_1$1(ctx) {
	let x_action_group0;
	let a;
	let t0;
	let a_href_value;
	let a_data_tooltip_value;
	let t1;
	let x_action_group1;
	let x_action0;
	let t2;
	let current_block_type_index;
	let if_block0;
	let x_action0_data_tooltip_value;
	let t3;
	let current_block_type_index_1;
	let if_block1;
	let t4;
	let x_action1;
	let t5;
	let x_action1_data_tooltip_value;
	let t6;
	let x_action_group2;
	let x_action2;
	let t7;
	let x_action2_data_tooltip_value;
	let t8;
	let t9;
	let x_action_group3;
	let t10;
	let if_block3_anchor;
	let current;
	let dispose;
	const goback = new ArrowLeft({ $$inline: true });
	const ripple0 = new ge({ $$inline: true });
	const ripple1 = new ge({ $$inline: true });
	const if_block_creators = [create_if_block_10, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$message*/ ctx[5].seen) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const if_block_creators_1 = [create_if_block_8, create_if_block_9];
	const if_blocks_1 = [];

	function select_block_type_1(ctx, dirty) {
		if (/*isJunk*/ ctx[8]) return 0;
		if (!/*isDraft*/ ctx[10] && !/*isSent*/ ctx[11] && !/*isTrash*/ ctx[9]) return 1;
		return -1;
	}

	if (~(current_block_type_index_1 = select_block_type_1(ctx))) {
		if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
	}

	const delete_1 = new Delete({ $$inline: true });
	const ripple2 = new ge({ $$inline: true });
	const resend = new Resend({ $$inline: true });
	const ripple3 = new ge({ $$inline: true });
	let if_block2 = !/*isDraft*/ ctx[10] && !/*isSent*/ ctx[11] && create_if_block_7(ctx);

	const moveto = new MoveTo({
			props: {
				mailbox: /*mailbox*/ ctx[0],
				selection: writable([/*message*/ ctx[1]]),
				tooltip: /*locale*/ ctx[3].actions.moveTo
			},
			$$inline: true
		});

	moveto.$on("moved", /*gotoBox*/ ctx[17]);
	let if_block3 = /*$message*/ ctx[5].attachments && /*$message*/ ctx[5].attachments.length && create_if_block_6(ctx);

	const block = {
		c: function create() {
			x_action_group0 = element("x-action-group");
			a = element("a");
			create_component(goback.$$.fragment);
			t0 = space();
			create_component(ripple0.$$.fragment);
			t1 = space();
			x_action_group1 = element("x-action-group");
			x_action0 = element("x-action");
			create_component(ripple1.$$.fragment);
			t2 = space();
			if_block0.c();
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			x_action1 = element("x-action");
			create_component(delete_1.$$.fragment);
			t5 = space();
			create_component(ripple2.$$.fragment);
			t6 = space();
			x_action_group2 = element("x-action-group");
			x_action2 = element("x-action");
			create_component(resend.$$.fragment);
			t7 = space();
			create_component(ripple3.$$.fragment);
			t8 = space();
			if (if_block2) if_block2.c();
			t9 = space();
			x_action_group3 = element("x-action-group");
			create_component(moveto.$$.fragment);
			t10 = space();
			if (if_block3) if_block3.c();
			if_block3_anchor = empty();
			attr_dev(a, "class", "x-action btn-dark");
			attr_dev(a, "href", a_href_value = "#!/mailbox/" + /*$mailbox*/ ctx[4].id);
			attr_dev(a, "data-tooltip", a_data_tooltip_value = /*locale*/ ctx[3].actions.backToMailbox);
			add_location(a, file$2, 149, 6, 3843);
			add_location(x_action_group0, file$2, 148, 4, 3820);
			set_custom_element_data(x_action0, "class", "btn-dark");

			set_custom_element_data(x_action0, "data-tooltip", x_action0_data_tooltip_value = /*$message*/ ctx[5].seen
			? /*locale*/ ctx[3].actions.markAsUnread
			: /*locale*/ ctx[3].actions.markAsRead);

			add_location(x_action0, file$2, 156, 6, 4048);
			set_custom_element_data(x_action1, "class", "btn-dark");

			set_custom_element_data(x_action1, "data-tooltip", x_action1_data_tooltip_value = /*isTrash*/ ctx[9]
			? /*locale*/ ctx[3].actions.deletePermanently
			: /*isDraft*/ ctx[10]
				? /*locale*/ ctx[3].actions.discardDrafts
				: /*locale*/ ctx[3].actions.delete);

			add_location(x_action1, file$2, 181, 6, 4760);
			add_location(x_action_group1, file$2, 155, 4, 4025);
			set_custom_element_data(x_action2, "class", "btn-dark");
			set_custom_element_data(x_action2, "data-tooltip", x_action2_data_tooltip_value = /*locale*/ ctx[3].actions.forward);
			add_location(x_action2, file$2, 192, 6, 5070);
			add_location(x_action_group2, file$2, 191, 4, 5047);
			add_location(x_action_group3, file$2, 205, 4, 5433);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, x_action_group0, anchor);
			append_dev(x_action_group0, a);
			mount_component(goback, a, null);
			append_dev(a, t0);
			mount_component(ripple0, a, null);
			insert_dev(target, t1, anchor);
			insert_dev(target, x_action_group1, anchor);
			append_dev(x_action_group1, x_action0);
			mount_component(ripple1, x_action0, null);
			append_dev(x_action0, t2);
			if_blocks[current_block_type_index].m(x_action0, null);
			append_dev(x_action_group1, t3);

			if (~current_block_type_index_1) {
				if_blocks_1[current_block_type_index_1].m(x_action_group1, null);
			}

			append_dev(x_action_group1, t4);
			append_dev(x_action_group1, x_action1);
			mount_component(delete_1, x_action1, null);
			append_dev(x_action1, t5);
			mount_component(ripple2, x_action1, null);
			insert_dev(target, t6, anchor);
			insert_dev(target, x_action_group2, anchor);
			append_dev(x_action_group2, x_action2);
			mount_component(resend, x_action2, null);
			append_dev(x_action2, t7);
			mount_component(ripple3, x_action2, null);
			append_dev(x_action_group2, t8);
			if (if_block2) if_block2.m(x_action_group2, null);
			insert_dev(target, t9, anchor);
			insert_dev(target, x_action_group3, anchor);
			mount_component(moveto, x_action_group3, null);
			insert_dev(target, t10, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_dev(target, if_block3_anchor, anchor);
			current = true;
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(x_action0, "click", /*seen*/ ctx[12], false, false, false),
				listen_dev(x_action1, "click", /*del*/ ctx[14], false, false, false),
				listen_dev(x_action2, "click", /*forward*/ ctx[16], false, false, false)
			];
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*$mailbox*/ 16 && a_href_value !== (a_href_value = "#!/mailbox/" + /*$mailbox*/ ctx[4].id)) {
				attr_dev(a, "href", a_href_value);
			}

			if (!current || dirty & /*locale*/ 8 && a_data_tooltip_value !== (a_data_tooltip_value = /*locale*/ ctx[3].actions.backToMailbox)) {
				attr_dev(a, "data-tooltip", a_data_tooltip_value);
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				}

				transition_in(if_block0, 1);
				if_block0.m(x_action0, null);
			}

			if (!current || dirty & /*$message, locale*/ 40 && x_action0_data_tooltip_value !== (x_action0_data_tooltip_value = /*$message*/ ctx[5].seen
			? /*locale*/ ctx[3].actions.markAsUnread
			: /*locale*/ ctx[3].actions.markAsRead)) {
				set_custom_element_data(x_action0, "data-tooltip", x_action0_data_tooltip_value);
			}

			if (if_block1) if_block1.p(ctx, dirty);

			if (!current || dirty & /*locale*/ 8 && x_action1_data_tooltip_value !== (x_action1_data_tooltip_value = /*isTrash*/ ctx[9]
			? /*locale*/ ctx[3].actions.deletePermanently
			: /*isDraft*/ ctx[10]
				? /*locale*/ ctx[3].actions.discardDrafts
				: /*locale*/ ctx[3].actions.delete)) {
				set_custom_element_data(x_action1, "data-tooltip", x_action1_data_tooltip_value);
			}

			if (!current || dirty & /*locale*/ 8 && x_action2_data_tooltip_value !== (x_action2_data_tooltip_value = /*locale*/ ctx[3].actions.forward)) {
				set_custom_element_data(x_action2, "data-tooltip", x_action2_data_tooltip_value);
			}

			if (!/*isDraft*/ ctx[10] && !/*isSent*/ ctx[11]) if_block2.p(ctx, dirty);
			const moveto_changes = {};
			if (dirty & /*mailbox*/ 1) moveto_changes.mailbox = /*mailbox*/ ctx[0];
			if (dirty & /*message*/ 2) moveto_changes.selection = writable([/*message*/ ctx[1]]);
			if (dirty & /*locale*/ 8) moveto_changes.tooltip = /*locale*/ ctx[3].actions.moveTo;
			moveto.$set(moveto_changes);

			if (/*$message*/ ctx[5].attachments && /*$message*/ ctx[5].attachments.length) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty & /*$message*/ 32) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_6(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(goback.$$.fragment, local);
			transition_in(ripple0.$$.fragment, local);
			transition_in(ripple1.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(delete_1.$$.fragment, local);
			transition_in(ripple2.$$.fragment, local);
			transition_in(resend.$$.fragment, local);
			transition_in(ripple3.$$.fragment, local);
			transition_in(if_block2);
			transition_in(moveto.$$.fragment, local);
			transition_in(if_block3);
			current = true;
		},
		o: function outro(local) {
			transition_out(goback.$$.fragment, local);
			transition_out(ripple0.$$.fragment, local);
			transition_out(ripple1.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(delete_1.$$.fragment, local);
			transition_out(ripple2.$$.fragment, local);
			transition_out(resend.$$.fragment, local);
			transition_out(ripple3.$$.fragment, local);
			transition_out(if_block2);
			transition_out(moveto.$$.fragment, local);
			transition_out(if_block3);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_action_group0);
			destroy_component(goback);
			destroy_component(ripple0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(x_action_group1);
			destroy_component(ripple1);
			if_blocks[current_block_type_index].d();

			if (~current_block_type_index_1) {
				if_blocks_1[current_block_type_index_1].d();
			}

			destroy_component(delete_1);
			destroy_component(ripple2);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(x_action_group2);
			destroy_component(resend);
			destroy_component(ripple3);
			if (if_block2) if_block2.d();
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(x_action_group3);
			destroy_component(moveto);
			if (detaching) detach_dev(t10);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach_dev(if_block3_anchor);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$1.name,
		type: "slot",
		source: "(148:2) <Topbar scrolled={$scroll !== 0}>",
		ctx
	});

	return block;
}

// (221:6) {#if $message.from}
function create_if_block_4(ctx) {
	let x_message_from;

	function select_block_type_2(ctx, dirty) {
		if (/*$message*/ ctx[5].from.name) return create_if_block_5;
		return create_else_block;
	}

	let current_block_type = select_block_type_2(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			x_message_from = element("x-message-from");
			if_block.c();
			set_custom_element_data(x_message_from, "class", "svelte-hdndkc");
			add_location(x_message_from, file$2, 221, 8, 5988);
		},
		m: function mount(target, anchor) {
			insert_dev(target, x_message_from, anchor);
			if_block.m(x_message_from, null);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(x_message_from, null);
				}
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_message_from);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(221:6) {#if $message.from}",
		ctx
	});

	return block;
}

// (227:10) {:else}
function create_else_block(ctx) {
	let t0_value = /*locale*/ ctx[3].message.labels.from + "";
	let t0;
	let t1;
	let span;
	let t2_value = /*$message*/ ctx[5].from.address + "";
	let t2;

	const block = {
		c: function create() {
			t0 = text(t0_value);
			t1 = space();
			span = element("span");
			t2 = text(t2_value);
			attr_dev(span, "class", "from-main svelte-hdndkc");
			add_location(span, file$2, 228, 12, 6269);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, span, anchor);
			append_dev(span, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*locale*/ 8 && t0_value !== (t0_value = /*locale*/ ctx[3].message.labels.from + "")) set_data_dev(t0, t0_value);
			if (dirty & /*$message*/ 32 && t2_value !== (t2_value = /*$message*/ ctx[5].from.address + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(227:10) {:else}",
		ctx
	});

	return block;
}

// (223:10) {#if $message.from.name}
function create_if_block_5(ctx) {
	let t0_value = /*locale*/ ctx[3].message.labels.from + "";
	let t0;
	let t1;
	let span;
	let t2_value = /*$message*/ ctx[5].from.name + "";
	let t2;
	let t3;
	let t4_value = "<" + "";
	let t4;
	let t5_value = /*$message*/ ctx[5].from.address + "";
	let t5;
	let t6_value = ">" + "";
	let t6;

	const block = {
		c: function create() {
			t0 = text(t0_value);
			t1 = space();
			span = element("span");
			t2 = text(t2_value);
			t3 = space();
			t4 = text(t4_value);
			t5 = text(t5_value);
			t6 = text(t6_value);
			attr_dev(span, "class", "from-main svelte-hdndkc");
			add_location(span, file$2, 224, 12, 6100);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, span, anchor);
			append_dev(span, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, t4, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, t6, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*locale*/ 8 && t0_value !== (t0_value = /*locale*/ ctx[3].message.labels.from + "")) set_data_dev(t0, t0_value);
			if (dirty & /*$message*/ 32 && t2_value !== (t2_value = /*$message*/ ctx[5].from.name + "")) set_data_dev(t2, t2_value);
			if (dirty & /*$message*/ 32 && t5_value !== (t5_value = /*$message*/ ctx[5].from.address + "")) set_data_dev(t5, t5_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(span);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(t6);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(223:10) {#if $message.from.name}",
		ctx
	});

	return block;
}

// (236:6) {#if $message.to}
function create_if_block_3(ctx) {
	let x_message_to;
	let t0_value = /*locale*/ ctx[3].message.labels.to + "";
	let t0;
	let t1;
	let t2_value = /*$message*/ ctx[5].to.map(func).join(", ") + "";
	let t2;

	const block = {
		c: function create() {
			x_message_to = element("x-message-to");
			t0 = text(t0_value);
			t1 = space();
			t2 = text(t2_value);
			set_custom_element_data(x_message_to, "class", "svelte-hdndkc");
			add_location(x_message_to, file$2, 236, 8, 6446);
		},
		m: function mount(target, anchor) {
			insert_dev(target, x_message_to, anchor);
			append_dev(x_message_to, t0);
			append_dev(x_message_to, t1);
			append_dev(x_message_to, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*locale*/ 8 && t0_value !== (t0_value = /*locale*/ ctx[3].message.labels.to + "")) set_data_dev(t0, t0_value);
			if (dirty & /*$message*/ 32 && t2_value !== (t2_value = /*$message*/ ctx[5].to.map(func).join(", ") + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_message_to);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(236:6) {#if $message.to}",
		ctx
	});

	return block;
}

// (244:6) {#if $message.date}
function create_if_block_2(ctx) {
	let x_message_date;
	let t0_value = /*locale*/ ctx[3].message.labels.date + "";
	let t0;
	let t1;
	let t2_value = new Date(/*$message*/ ctx[5].date).toLocaleString() + "";
	let t2;

	const block = {
		c: function create() {
			x_message_date = element("x-message-date");
			t0 = text(t0_value);
			t1 = space();
			t2 = text(t2_value);
			set_custom_element_data(x_message_date, "class", "svelte-hdndkc");
			add_location(x_message_date, file$2, 244, 8, 6666);
		},
		m: function mount(target, anchor) {
			insert_dev(target, x_message_date, anchor);
			append_dev(x_message_date, t0);
			append_dev(x_message_date, t1);
			append_dev(x_message_date, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*locale*/ 8 && t0_value !== (t0_value = /*locale*/ ctx[3].message.labels.date + "")) set_data_dev(t0, t0_value);
			if (dirty & /*$message*/ 32 && t2_value !== (t2_value = new Date(/*$message*/ ctx[5].date).toLocaleString() + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_message_date);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(244:6) {#if $message.date}",
		ctx
	});

	return block;
}

// (254:54) 
function create_if_block_1(ctx) {
	let pre;
	let t_value = /*$message*/ ctx[5].text + "";
	let t;

	const block = {
		c: function create() {
			pre = element("pre");
			t = text(t_value);
			add_location(pre, file$2, 254, 8, 7012);
		},
		m: function mount(target, anchor) {
			insert_dev(target, pre, anchor);
			append_dev(pre, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$message*/ 32 && t_value !== (t_value = /*$message*/ ctx[5].text + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(254:54) ",
		ctx
	});

	return block;
}

// (252:6) {#if $message.html && $message.html.length}
function create_if_block$1(ctx) {
	let html_tag;
	let raw_value = sanitize(/*$message*/ ctx[5].html.join("")) + "";

	const block = {
		c: function create() {
			html_tag = new HtmlTag(raw_value, null);
		},
		m: function mount(target, anchor) {
			html_tag.m(target, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$message*/ 32 && raw_value !== (raw_value = sanitize(/*$message*/ ctx[5].html.join("")) + "")) html_tag.p(raw_value);
		},
		d: function destroy(detaching) {
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(252:6) {#if $message.html && $message.html.length}",
		ctx
	});

	return block;
}

// (147:0) <Tab>
function create_default_slot$1(ctx) {
	let t0;
	let x_tab_content;
	let x_message_title;
	let t1_value = /*$message*/ ctx[5].subject + "";
	let t1;
	let t2;
	let x_message_info;
	let t3;
	let t4;
	let t5;
	let x_message_content;
	let show_if;
	let current;
	let dispose;

	const topbar = new Topbar({
			props: {
				scrolled: /*$scroll*/ ctx[6] !== 0,
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let if_block0 = /*$message*/ ctx[5].from && create_if_block_4(ctx);
	let if_block1 = /*$message*/ ctx[5].to && create_if_block_3(ctx);
	let if_block2 = /*$message*/ ctx[5].date && create_if_block_2(ctx);

	function select_block_type_3(ctx, dirty) {
		if (/*$message*/ ctx[5].html && /*$message*/ ctx[5].html.length) return create_if_block$1;
		if (show_if == null || dirty & /*$message*/ 32) show_if = !!(/*$message*/ ctx[5].text && /*$message*/ ctx[5].text.trim());
		if (show_if) return create_if_block_1;
	}

	let current_block_type = select_block_type_3(ctx, -1);
	let if_block3 = current_block_type && current_block_type(ctx);

	const block = {
		c: function create() {
			create_component(topbar.$$.fragment);
			t0 = space();
			x_tab_content = element("x-tab-content");
			x_message_title = element("x-message-title");
			t1 = text(t1_value);
			t2 = space();
			x_message_info = element("x-message-info");
			if (if_block0) if_block0.c();
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			if (if_block2) if_block2.c();
			t5 = space();
			x_message_content = element("x-message-content");
			if (if_block3) if_block3.c();
			set_custom_element_data(x_message_title, "class", "svelte-hdndkc");
			add_location(x_message_title, file$2, 217, 4, 5878);
			set_custom_element_data(x_message_info, "class", "svelte-hdndkc");
			add_location(x_message_info, file$2, 218, 4, 5936);
			set_custom_element_data(x_message_content, "class", "svelte-hdndkc");
			add_location(x_message_content, file$2, 250, 4, 6830);
			set_custom_element_data(x_tab_content, "class", "svelte-hdndkc");
			add_location(x_tab_content, file$2, 216, 2, 5833);
		},
		m: function mount(target, anchor, remount) {
			mount_component(topbar, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, x_tab_content, anchor);
			append_dev(x_tab_content, x_message_title);
			append_dev(x_message_title, t1);
			append_dev(x_tab_content, t2);
			append_dev(x_tab_content, x_message_info);
			if (if_block0) if_block0.m(x_message_info, null);
			append_dev(x_message_info, t3);
			if (if_block1) if_block1.m(x_message_info, null);
			append_dev(x_message_info, t4);
			if (if_block2) if_block2.m(x_message_info, null);
			append_dev(x_tab_content, t5);
			append_dev(x_tab_content, x_message_content);
			if (if_block3) if_block3.m(x_message_content, null);
			current = true;
			if (remount) dispose();
			dispose = listen_dev(x_tab_content, "scroll", /*handleScroll*/ ctx[7], false, false, false);
		},
		p: function update(ctx, dirty) {
			const topbar_changes = {};
			if (dirty & /*$scroll*/ 64) topbar_changes.scrolled = /*$scroll*/ ctx[6] !== 0;

			if (dirty & /*$$scope, mailbox, message, $message, locale, $mailbox*/ 2097211) {
				topbar_changes.$$scope = { dirty, ctx };
			}

			topbar.$set(topbar_changes);
			if ((!current || dirty & /*$message*/ 32) && t1_value !== (t1_value = /*$message*/ ctx[5].subject + "")) set_data_dev(t1, t1_value);

			if (/*$message*/ ctx[5].from) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					if_block0.m(x_message_info, t3);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*$message*/ ctx[5].to) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_3(ctx);
					if_block1.c();
					if_block1.m(x_message_info, t4);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*$message*/ ctx[5].date) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_2(ctx);
					if_block2.c();
					if_block2.m(x_message_info, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (current_block_type === (current_block_type = select_block_type_3(ctx, dirty)) && if_block3) {
				if_block3.p(ctx, dirty);
			} else {
				if (if_block3) if_block3.d(1);
				if_block3 = current_block_type && current_block_type(ctx);

				if (if_block3) {
					if_block3.c();
					if_block3.m(x_message_content, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(topbar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(topbar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(topbar, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(x_tab_content);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();

			if (if_block3) {
				if_block3.d();
			}

			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(147:0) <Tab>",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let title_value;
	let t;
	let current;
	document.title = title_value = /*$message*/ ctx[5].subject;

	const tab = new Tab({
			props: {
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t = space();
			create_component(tab.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			mount_component(tab, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*$message*/ 32) && title_value !== (title_value = /*$message*/ ctx[5].subject)) {
				document.title = title_value;
			}

			const tab_changes = {};

			if (dirty & /*$$scope, $message, locale, $scroll, mailbox, message, $mailbox*/ 2097275) {
				tab_changes.$$scope = { dirty, ctx };
			}

			tab.$set(tab_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tab.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tab.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			destroy_component(tab, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const func = to => {
	return `<${to.address}>`;
};

function instance$2($$self, $$props, $$invalidate) {
	let $mailbox,
		$$unsubscribe_mailbox = noop,
		$$subscribe_mailbox = () => ($$unsubscribe_mailbox(), $$unsubscribe_mailbox = subscribe(mailbox, $$value => $$invalidate(4, $mailbox = $$value)), mailbox);

	let $message,
		$$unsubscribe_message = noop,
		$$subscribe_message = () => ($$unsubscribe_message(), $$unsubscribe_message = subscribe(message, $$value => $$invalidate(5, $message = $$value)), message);

	let $l;

	let $scroll,
		$$unsubscribe_scroll = noop,
		$$subscribe_scroll = () => ($$unsubscribe_scroll(), $$unsubscribe_scroll = subscribe(scroll, $$value => $$invalidate(6, $scroll = $$value)), scroll);

	$$self.$$.on_destroy.push(() => $$unsubscribe_mailbox());
	$$self.$$.on_destroy.push(() => $$unsubscribe_message());
	$$self.$$.on_destroy.push(() => $$unsubscribe_scroll());
	let { mailbox } = $$props;
	validate_store(mailbox, "mailbox");
	$$subscribe_mailbox();
	let { message } = $$props;
	validate_store(message, "message");
	$$subscribe_message();
	let { scroll } = $$props;
	validate_store(scroll, "scroll");
	$$subscribe_scroll();
	const handleScroll = e => scroll.set(e.target.scrollTop);
	let isJunk = junk === mailbox;
	let isTrash = trash === mailbox;
	let isDraft = drafts === mailbox;
	let isSent = sent === mailbox;

	const onetime = fn => {
		let updating = false;

		return async () => {
			if (updating) return;
			updating = true;

			try {
				await fn();
			} catch(e) {
				throw e;
			} finally {
				updating = false;
			}
		};
	};

	const seen = onetime(async () => {
		await updateSeen($mailbox.id, [$message.id], !$message.seen);
		message.update(m => ({ ...m, seen: !m.seen }));
	});

	const spam = onetime(async () => {
		await markAsSpam($mailbox.id, [$message.id], !isJunk);
		location.hash = `#!/mailbox/${$mailbox.id}`;
	});

	const del = onetime(async () => {
		await _del($mailbox.id, [$message.id]);
		location.hash = `#!/mailbox/${$mailbox.id}`;
	});

	const reply = onetime(async () => {
		const $draft = await createReply($mailbox.id, $message.id);
		create(writable($draft));
	});

	const forward = onetime(async () => {
		const $draft = await createForward($mailbox.id, $message.id);
		create(writable($draft));
	});

	const gotoBox = () => setTimeout(() => location.hash = `#!/mailbox/${$mailbox.id}`, 250);
	const { locale: l } = getContext("app");
	validate_store(l, "l");
	component_subscribe($$self, l, value => $$invalidate(19, $l = value));
	let { locale = $l } = $$props;
	const writable_props = ["mailbox", "message", "scroll", "locale"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Message> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Message", $$slots, []);

	$$self.$set = $$props => {
		if ("mailbox" in $$props) $$subscribe_mailbox($$invalidate(0, mailbox = $$props.mailbox));
		if ("message" in $$props) $$subscribe_message($$invalidate(1, message = $$props.message));
		if ("scroll" in $$props) $$subscribe_scroll($$invalidate(2, scroll = $$props.scroll));
		if ("locale" in $$props) $$invalidate(3, locale = $$props.locale);
	};

	$$self.$capture_state = () => ({
		writable,
		getContext,
		Tab,
		Topbar,
		Delete,
		MarkUnseen,
		MarkSeen,
		MarkSpam,
		UnMarkSpam,
		Resend,
		Reply,
		GoBack: ArrowLeft,
		Ripple: ge,
		sanitize,
		create,
		mailbox,
		message,
		scroll,
		handleScroll,
		messages,
		mailboxes,
		isJunk,
		isTrash,
		isDraft,
		isSent,
		onetime,
		seen,
		spam,
		del,
		reply,
		forward,
		MoveTo,
		gotoBox,
		Attachments,
		l,
		locale,
		$mailbox,
		$message,
		$l,
		$scroll
	});

	$$self.$inject_state = $$props => {
		if ("mailbox" in $$props) $$subscribe_mailbox($$invalidate(0, mailbox = $$props.mailbox));
		if ("message" in $$props) $$subscribe_message($$invalidate(1, message = $$props.message));
		if ("scroll" in $$props) $$subscribe_scroll($$invalidate(2, scroll = $$props.scroll));
		if ("isJunk" in $$props) $$invalidate(8, isJunk = $$props.isJunk);
		if ("isTrash" in $$props) $$invalidate(9, isTrash = $$props.isTrash);
		if ("isDraft" in $$props) $$invalidate(10, isDraft = $$props.isDraft);
		if ("isSent" in $$props) $$invalidate(11, isSent = $$props.isSent);
		if ("locale" in $$props) $$invalidate(3, locale = $$props.locale);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		mailbox,
		message,
		scroll,
		locale,
		$mailbox,
		$message,
		$scroll,
		handleScroll,
		isJunk,
		isTrash,
		isDraft,
		isSent,
		seen,
		spam,
		del,
		reply,
		forward,
		gotoBox,
		l
	];
}

class Message extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			mailbox: 0,
			message: 1,
			scroll: 2,
			locale: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Message",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*mailbox*/ ctx[0] === undefined && !("mailbox" in props)) {
			console.warn("<Message> was created without expected prop 'mailbox'");
		}

		if (/*message*/ ctx[1] === undefined && !("message" in props)) {
			console.warn("<Message> was created without expected prop 'message'");
		}

		if (/*scroll*/ ctx[2] === undefined && !("scroll" in props)) {
			console.warn("<Message> was created without expected prop 'scroll'");
		}
	}

	get mailbox() {
		throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set mailbox(value) {
		throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get message() {
		throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set message(value) {
		throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scroll() {
		throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scroll(value) {
		throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get locale() {
		throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set locale(value) {
		throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/lib/router/routes/Message.svelte generated by Svelte v3.21.0 */

function create_fragment$3(ctx) {
	let current;

	const message_1 = new Message({
			props: {
				mailbox: /*mailbox*/ ctx[0],
				message: /*message*/ ctx[1],
				scroll: /*scroll*/ ctx[2]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(message_1.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(message_1, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const message_1_changes = {};
			if (dirty & /*mailbox*/ 1) message_1_changes.mailbox = /*mailbox*/ ctx[0];
			if (dirty & /*message*/ 2) message_1_changes.message = /*message*/ ctx[1];
			if (dirty & /*scroll*/ 4) message_1_changes.scroll = /*scroll*/ ctx[2];
			message_1.$set(message_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(message_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(message_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(message_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload($page) {
	if (!user.get()) {
		return this.redirect("#!/login");
	}

	const mailbox = await _get($page.params.mailbox);

	if (mailbox == null) {
		return this.redirect("#!/");
	}

	try {
		const $message = await _get$1($page.params.mailbox, $page.params.message);
		const message = writable($message);
		const scroll = writable(0);
		return { mailbox, message, scroll };
	} catch(e) {
		this.redirect(`#!/mailbox/${mailbox.get().id}`);
	}
}

function instance$3($$self, $$props, $$invalidate) {
	let { mailbox } = $$props;
	let { message } = $$props;
	let { scroll } = $$props;
	const writable_props = ["mailbox", "message", "scroll"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Message> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Message", $$slots, []);

	$$self.$set = $$props => {
		if ("mailbox" in $$props) $$invalidate(0, mailbox = $$props.mailbox);
		if ("message" in $$props) $$invalidate(1, message = $$props.message);
		if ("scroll" in $$props) $$invalidate(2, scroll = $$props.scroll);
	};

	$$self.$capture_state = () => ({
		writable,
		user,
		mailboxes,
		messages,
		preload,
		Message,
		mailbox,
		message,
		scroll
	});

	$$self.$inject_state = $$props => {
		if ("mailbox" in $$props) $$invalidate(0, mailbox = $$props.mailbox);
		if ("message" in $$props) $$invalidate(1, message = $$props.message);
		if ("scroll" in $$props) $$invalidate(2, scroll = $$props.scroll);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [mailbox, message, scroll];
}

class Message_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { mailbox: 0, message: 1, scroll: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Message_1",
			options,
			id: create_fragment$3.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*mailbox*/ ctx[0] === undefined && !("mailbox" in props)) {
			console.warn("<Message> was created without expected prop 'mailbox'");
		}

		if (/*message*/ ctx[1] === undefined && !("message" in props)) {
			console.warn("<Message> was created without expected prop 'message'");
		}

		if (/*scroll*/ ctx[2] === undefined && !("scroll" in props)) {
			console.warn("<Message> was created without expected prop 'scroll'");
		}
	}

	get mailbox() {
		throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set mailbox(value) {
		throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get message() {
		throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set message(value) {
		throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scroll() {
		throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scroll(value) {
		throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Message_1;
export { preload };
//# sourceMappingURL=Message-8f72c84d.js.map
