
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { Q as writable, S as SvelteComponentDev, a as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, b as svg_element, c as attr_dev, e as add_location, f as insert_dev, g as append_dev, n as noop, h as detach_dev, R as ge, J as getContext, K as validate_store, L as component_subscribe, U as subscribe, V as onDestroy, W as slide, X as fly, Y as create, Z as drafts, _ as sent, $ as messages, m as element, p as space, o as create_component, O as text, a0 as set_custom_element_data, a1 as toggle_class, q as mount_component, r as run_all, t as listen_dev, a2 as stop_propagation, w as prevent_default, A as group_outros, C as transition_out, D as check_outros, E as transition_in, P as set_data_dev, F as destroy_component, a3 as flag, a4 as getDraft, a5 as setContext, a6 as onMount, a7 as fade, a8 as flip, a9 as Delete, aa as MarkSpam, ab as CircularProgress, ac as junk, ad as trash, ae as list, af as quadOut, ag as mailboxMeta, ah as validate_each_argument, ai as validate_each_keys, aj as updateSeen, ak as markAsSpam, al as _del, am as next, an as set_store_value, ao as empty, ap as add_render_callback, aq as create_in_transition, ar as create_out_transition, as as update_keyed_each, at as create_bidirectional_transition, au as set_style, av as outro_and_destroy_block, u as user, aw as _get } from './main-048546a6.js';
import { T as Tab, a as Topbar, M as MarkUnseen, b as MarkSeen, U as UnMarkSpam, R as Resend, c as Reply, d as MoveTo } from './MoveTo-af9af642.js';

const createSelection = (items = []) => {
    const selection = writable(items);
    const clear = () => selection.set([]);
    const add = (...args) => {
        const helper = selection.get().slice();
        for (const item of args) {
            if (!helper.includes(item)) {
                helper.push(item);
            }
            selection.set(helper);
        }
    };
    const remove = (...args) => selection.update($selection => $selection.filter(i => !args.includes(i)));
    const has = (item) => selection.get().includes(item);
    const toggle = (item) => {
        has(item) ? remove(item) : add(item);
    };
    const isSelected = writable(has);
    selection.subscribe(isSelected.invalidate);
    return { ...selection, clear, add, remove, toggle, isSelected };
};

/* node_modules/svelte-material-icons/StarOutline.svelte generated by Svelte v3.21.0 */

const file = "node_modules/svelte-material-icons/StarOutline.svelte";

function create_fragment(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M12,15.39L8.24,17.66L9.23,13.38L5.91,10.5L10.29,10.13L12,6.09L13.71,10.13L18.09,10.5L14.77,13.38L15.76,17.66M22,9.24L14.81,8.63L12,2L9.19,8.63L2,9.24L7.45,13.97L5.82,21L12,17.27L18.18,21L16.54,13.97L22,9.24Z");
			attr_dev(path, "fill", /*color*/ ctx[2]);
			add_location(path, file, 8, 59, 234);
			attr_dev(svg, "width", /*width*/ ctx[0]);
			attr_dev(svg, "height", /*height*/ ctx[1]);
			attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			add_location(svg, file, 8, 0, 175);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*color*/ 4) {
				attr_dev(path, "fill", /*color*/ ctx[2]);
			}

			if (dirty & /*width*/ 1) {
				attr_dev(svg, "width", /*width*/ ctx[0]);
			}

			if (dirty & /*height*/ 2) {
				attr_dev(svg, "height", /*height*/ ctx[1]);
			}

			if (dirty & /*viewBox*/ 8) {
				attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { size = "1em" } = $$props;
	let { width = size } = $$props;
	let { height = size } = $$props;
	let { color = "currentColor" } = $$props;
	let { viewBox = "0 0 24 24" } = $$props;
	const writable_props = ["size", "width", "height", "color", "viewBox"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<StarOutline> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("StarOutline", $$slots, []);

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	$$self.$capture_state = () => ({ size, width, height, color, viewBox });

	$$self.$inject_state = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [width, height, color, viewBox, size];
}

class StarOutline extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			size: 4,
			width: 0,
			height: 1,
			color: 2,
			viewBox: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StarOutline",
			options,
			id: create_fragment.name
		});
	}

	get size() {
		throw new Error("<StarOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<StarOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<StarOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<StarOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<StarOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<StarOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<StarOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<StarOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get viewBox() {
		throw new Error("<StarOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set viewBox(value) {
		throw new Error("<StarOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/svelte-material-icons/Star.svelte generated by Svelte v3.21.0 */

const file$1 = "node_modules/svelte-material-icons/Star.svelte";

function create_fragment$1(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M12,17.27L18.18,21L16.54,13.97L22,9.24L14.81,8.62L12,2L9.19,8.62L2,9.24L7.45,13.97L5.82,21L12,17.27Z");
			attr_dev(path, "fill", /*color*/ ctx[2]);
			add_location(path, file$1, 8, 59, 234);
			attr_dev(svg, "width", /*width*/ ctx[0]);
			attr_dev(svg, "height", /*height*/ ctx[1]);
			attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			add_location(svg, file$1, 8, 0, 175);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*color*/ 4) {
				attr_dev(path, "fill", /*color*/ ctx[2]);
			}

			if (dirty & /*width*/ 1) {
				attr_dev(svg, "width", /*width*/ ctx[0]);
			}

			if (dirty & /*height*/ 2) {
				attr_dev(svg, "height", /*height*/ ctx[1]);
			}

			if (dirty & /*viewBox*/ 8) {
				attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { size = "1em" } = $$props;
	let { width = size } = $$props;
	let { height = size } = $$props;
	let { color = "currentColor" } = $$props;
	let { viewBox = "0 0 24 24" } = $$props;
	const writable_props = ["size", "width", "height", "color", "viewBox"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Star> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Star", $$slots, []);

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	$$self.$capture_state = () => ({ size, width, height, color, viewBox });

	$$self.$inject_state = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [width, height, color, viewBox, size];
}

class Star extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			size: 4,
			width: 0,
			height: 1,
			color: 2,
			viewBox: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Star",
			options,
			id: create_fragment$1.name
		});
	}

	get size() {
		throw new Error("<Star>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Star>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<Star>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Star>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<Star>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<Star>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<Star>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<Star>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get viewBox() {
		throw new Error("<Star>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set viewBox(value) {
		throw new Error("<Star>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/svelte-material-icons/CheckboxBlankOutline.svelte generated by Svelte v3.21.0 */

const file$2 = "node_modules/svelte-material-icons/CheckboxBlankOutline.svelte";

function create_fragment$2(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z");
			attr_dev(path, "fill", /*color*/ ctx[2]);
			add_location(path, file$2, 8, 59, 234);
			attr_dev(svg, "width", /*width*/ ctx[0]);
			attr_dev(svg, "height", /*height*/ ctx[1]);
			attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			add_location(svg, file$2, 8, 0, 175);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*color*/ 4) {
				attr_dev(path, "fill", /*color*/ ctx[2]);
			}

			if (dirty & /*width*/ 1) {
				attr_dev(svg, "width", /*width*/ ctx[0]);
			}

			if (dirty & /*height*/ 2) {
				attr_dev(svg, "height", /*height*/ ctx[1]);
			}

			if (dirty & /*viewBox*/ 8) {
				attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { size = "1em" } = $$props;
	let { width = size } = $$props;
	let { height = size } = $$props;
	let { color = "currentColor" } = $$props;
	let { viewBox = "0 0 24 24" } = $$props;
	const writable_props = ["size", "width", "height", "color", "viewBox"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CheckboxBlankOutline> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("CheckboxBlankOutline", $$slots, []);

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	$$self.$capture_state = () => ({ size, width, height, color, viewBox });

	$$self.$inject_state = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [width, height, color, viewBox, size];
}

class CheckboxBlankOutline extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			size: 4,
			width: 0,
			height: 1,
			color: 2,
			viewBox: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CheckboxBlankOutline",
			options,
			id: create_fragment$2.name
		});
	}

	get size() {
		throw new Error("<CheckboxBlankOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<CheckboxBlankOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<CheckboxBlankOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<CheckboxBlankOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<CheckboxBlankOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<CheckboxBlankOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<CheckboxBlankOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<CheckboxBlankOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get viewBox() {
		throw new Error("<CheckboxBlankOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set viewBox(value) {
		throw new Error("<CheckboxBlankOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/svelte-material-icons/CheckboxMarked.svelte generated by Svelte v3.21.0 */

const file$3 = "node_modules/svelte-material-icons/CheckboxMarked.svelte";

function create_fragment$3(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10,17L5,12L6.41,10.58L10,14.17L17.59,6.58L19,8M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z");
			attr_dev(path, "fill", /*color*/ ctx[2]);
			add_location(path, file$3, 8, 59, 234);
			attr_dev(svg, "width", /*width*/ ctx[0]);
			attr_dev(svg, "height", /*height*/ ctx[1]);
			attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			add_location(svg, file$3, 8, 0, 175);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*color*/ 4) {
				attr_dev(path, "fill", /*color*/ ctx[2]);
			}

			if (dirty & /*width*/ 1) {
				attr_dev(svg, "width", /*width*/ ctx[0]);
			}

			if (dirty & /*height*/ 2) {
				attr_dev(svg, "height", /*height*/ ctx[1]);
			}

			if (dirty & /*viewBox*/ 8) {
				attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { size = "1em" } = $$props;
	let { width = size } = $$props;
	let { height = size } = $$props;
	let { color = "currentColor" } = $$props;
	let { viewBox = "0 0 24 24" } = $$props;
	const writable_props = ["size", "width", "height", "color", "viewBox"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CheckboxMarked> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("CheckboxMarked", $$slots, []);

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	$$self.$capture_state = () => ({ size, width, height, color, viewBox });

	$$self.$inject_state = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [width, height, color, viewBox, size];
}

class CheckboxMarked extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			size: 4,
			width: 0,
			height: 1,
			color: 2,
			viewBox: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CheckboxMarked",
			options,
			id: create_fragment$3.name
		});
	}

	get size() {
		throw new Error("<CheckboxMarked>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<CheckboxMarked>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<CheckboxMarked>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<CheckboxMarked>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<CheckboxMarked>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<CheckboxMarked>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<CheckboxMarked>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<CheckboxMarked>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get viewBox() {
		throw new Error("<CheckboxMarked>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set viewBox(value) {
		throw new Error("<CheckboxMarked>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

//const months = ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"]
//const days = ["dom", "lun", "mar", "mie", "jue", "vie", "sab"]
const pad = (n) => n.toString().padStart(2, "0");
const date = (str, locale) => {
    const now = new Date();
    const date = new Date(str);
    if (now.getFullYear() !== date.getFullYear())
        return `${locale.months[date.getMonth()]} ${date.getFullYear()}`;
    if (now.getMonth() !== date.getMonth())
        return `${date.getDate()} ${locale.months[date.getMonth()]}`;
    if (now.getDate() !== date.getDate()) {
        return `${locale.weekDays[date.getDay()]} ${date.getDate()}`;
    }
    return `${date.getHours()}:${pad(date.getMinutes())}`;
};

/* src/comp/Pages/Mailbox/MailboxMessage.svelte generated by Svelte v3.21.0 */
const file$4 = "src/comp/Pages/Mailbox/MailboxMessage.svelte";

// (221:4) {:else}
function create_else_block_2(ctx) {
	let current;
	const on = new CheckboxBlankOutline({ $$inline: true });

	const block = {
		c: function create() {
			create_component(on.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(on, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(on.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(on.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(on, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(221:4) {:else}",
		ctx
	});

	return block;
}

// (219:4) {#if selected}
function create_if_block_2(ctx) {
	let current;
	const off = new CheckboxMarked({ $$inline: true });

	const block = {
		c: function create() {
			create_component(off.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(off, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(off.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(off.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(off, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(219:4) {#if selected}",
		ctx
	});

	return block;
}

// (231:4) {:else}
function create_else_block_1(ctx) {
	let current;
	const unflagged = new StarOutline({ $$inline: true });

	const block = {
		c: function create() {
			create_component(unflagged.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(unflagged, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(unflagged.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(unflagged.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(unflagged, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(231:4) {:else}",
		ctx
	});

	return block;
}

// (229:4) {#if $message.flagged}
function create_if_block_1(ctx) {
	let current;
	const flagged = new Star({ $$inline: true });

	const block = {
		c: function create() {
			create_component(flagged.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(flagged, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(flagged.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(flagged.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(flagged, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(229:4) {#if $message.flagged}",
		ctx
	});

	return block;
}

// (241:6) {:else}
function create_else_block(ctx) {
	let t_value = (/*$message*/ ctx[7].from.name || /*$message*/ ctx[7].from.address || "") + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$message*/ 128 && t_value !== (t_value = (/*$message*/ ctx[7].from.name || /*$message*/ ctx[7].from.address || "") + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(241:6) {:else}",
		ctx
	});

	return block;
}

// (239:6) {#if isSent || isDraft}
function create_if_block(ctx) {
	let span;
	let t0_value = /*locale*/ ctx[2].mailboxMessage.to + "";
	let t0;
	let t1;
	let t2_value = (/*$message*/ ctx[7].to || []).map(func).filter(Boolean).join(", ") + "";
	let t2;

	const block = {
		c: function create() {
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			t2 = text(t2_value);
			attr_dev(span, "class", "for");
			add_location(span, file$4, 239, 8, 4722);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			append_dev(span, t1);
			insert_dev(target, t2, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*locale*/ 4 && t0_value !== (t0_value = /*locale*/ ctx[2].mailboxMessage.to + "")) set_data_dev(t0, t0_value);
			if (dirty & /*$message*/ 128 && t2_value !== (t2_value = (/*$message*/ ctx[7].to || []).map(func).filter(Boolean).join(", ") + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (detaching) detach_dev(t2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(239:6) {#if isSent || isDraft}",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let a;
	let x_cell0;
	let current_block_type_index;
	let if_block0;
	let t0;
	let t1;
	let x_cell1;
	let current_block_type_index_1;
	let if_block1;
	let t2;
	let t3;
	let x_cell_group;
	let x_cell2;
	let t4;
	let x_cell3;
	let span0;
	let t5_value = (/*$message*/ ctx[7].subject || "") + "";
	let t5;
	let t6;
	let span1;
	let t7_value = (/*$message*/ ctx[7].intro || "") + "";
	let t7;
	let t8;
	let x_cell4;
	let t9_value = (/*$message*/ ctx[7].date && date(/*$message*/ ctx[7].date, /*locale*/ ctx[2])) + "";
	let t9;
	let a_href_value;
	let current;
	let dispose;
	const if_block_creators = [create_if_block_2, create_else_block_2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*selected*/ ctx[5]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const ripple0 = new ge({ $$inline: true });
	const if_block_creators_1 = [create_if_block_1, create_else_block_1];
	const if_blocks_1 = [];

	function select_block_type_1(ctx, dirty) {
		if (/*$message*/ ctx[7].flagged) return 0;
		return 1;
	}

	current_block_type_index_1 = select_block_type_1(ctx);
	if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
	const ripple1 = new ge({ $$inline: true });

	function select_block_type_2(ctx, dirty) {
		if (/*isSent*/ ctx[4] || /*isDraft*/ ctx[3]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type_2(ctx);
	let if_block2 = current_block_type(ctx);

	const block = {
		c: function create() {
			a = element("a");
			x_cell0 = element("x-cell");
			if_block0.c();
			t0 = space();
			create_component(ripple0.$$.fragment);
			t1 = space();
			x_cell1 = element("x-cell");
			if_block1.c();
			t2 = space();
			create_component(ripple1.$$.fragment);
			t3 = space();
			x_cell_group = element("x-cell-group");
			x_cell2 = element("x-cell");
			if_block2.c();
			t4 = space();
			x_cell3 = element("x-cell");
			span0 = element("span");
			t5 = text(t5_value);
			t6 = space();
			span1 = element("span");
			t7 = text(t7_value);
			t8 = space();
			x_cell4 = element("x-cell");
			t9 = text(t9_value);
			set_custom_element_data(x_cell0, "class", "btn-dark icon cell-selected svelte-2l64lx");
			add_location(x_cell0, file$4, 217, 2, 4181);
			set_custom_element_data(x_cell1, "class", "btn-dark icon svelte-2l64lx");
			toggle_class(x_cell1, "flagged", /*$message*/ ctx[7].flagged);
			add_location(x_cell1, file$4, 227, 2, 4389);
			set_custom_element_data(x_cell2, "class", "from svelte-2l64lx");
			add_location(x_cell2, file$4, 237, 4, 4662);
			attr_dev(span0, "class", "subject");
			add_location(span0, file$4, 247, 6, 4999);
			attr_dev(span1, "class", "intro svelte-2l64lx");
			add_location(span1, file$4, 248, 6, 5059);
			set_custom_element_data(x_cell3, "class", "subject-intro svelte-2l64lx");
			add_location(x_cell3, file$4, 246, 4, 4962);
			set_custom_element_data(x_cell4, "class", "date svelte-2l64lx");
			add_location(x_cell4, file$4, 252, 4, 5129);
			set_custom_element_data(x_cell_group, "class", "from-subject-date svelte-2l64lx");
			add_location(x_cell_group, file$4, 236, 2, 4617);
			attr_dev(a, "href", a_href_value = "#!/mailbox/" + /*$mailbox*/ ctx[6].id + "/message/" + /*$message*/ ctx[7].id);
			attr_dev(a, "class", "na message svelte-2l64lx");
			toggle_class(a, "selected", /*selected*/ ctx[5]);
			toggle_class(a, "unseen", !/*$message*/ ctx[7].seen);
			add_location(a, file$4, 216, 0, 4040);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, a, anchor);
			append_dev(a, x_cell0);
			if_blocks[current_block_type_index].m(x_cell0, null);
			append_dev(x_cell0, t0);
			mount_component(ripple0, x_cell0, null);
			append_dev(a, t1);
			append_dev(a, x_cell1);
			if_blocks_1[current_block_type_index_1].m(x_cell1, null);
			append_dev(x_cell1, t2);
			mount_component(ripple1, x_cell1, null);
			append_dev(a, t3);
			append_dev(a, x_cell_group);
			append_dev(x_cell_group, x_cell2);
			if_block2.m(x_cell2, null);
			append_dev(x_cell_group, t4);
			append_dev(x_cell_group, x_cell3);
			append_dev(x_cell3, span0);
			append_dev(span0, t5);
			append_dev(x_cell3, t6);
			append_dev(x_cell3, span1);
			append_dev(span1, t7);
			append_dev(x_cell_group, t8);
			append_dev(x_cell_group, x_cell4);
			append_dev(x_cell4, t9);
			current = true;
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(x_cell0, "click", stop_propagation(prevent_default(/*click_handler*/ ctx[19])), false, true, true),
				listen_dev(x_cell1, "click", stop_propagation(prevent_default(/*flag*/ ctx[10])), false, true, true),
				listen_dev(a, "click", /*click*/ ctx[11], false, false, false)
			];
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				}

				transition_in(if_block0, 1);
				if_block0.m(x_cell0, t0);
			}

			let previous_block_index_1 = current_block_type_index_1;
			current_block_type_index_1 = select_block_type_1(ctx);

			if (current_block_type_index_1 !== previous_block_index_1) {
				group_outros();

				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
					if_blocks_1[previous_block_index_1] = null;
				});

				check_outros();
				if_block1 = if_blocks_1[current_block_type_index_1];

				if (!if_block1) {
					if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
					if_block1.c();
				}

				transition_in(if_block1, 1);
				if_block1.m(x_cell1, t2);
			}

			if (dirty & /*$message*/ 128) {
				toggle_class(x_cell1, "flagged", /*$message*/ ctx[7].flagged);
			}

			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block2) {
				if_block2.p(ctx, dirty);
			} else {
				if_block2.d(1);
				if_block2 = current_block_type(ctx);

				if (if_block2) {
					if_block2.c();
					if_block2.m(x_cell2, null);
				}
			}

			if ((!current || dirty & /*$message*/ 128) && t5_value !== (t5_value = (/*$message*/ ctx[7].subject || "") + "")) set_data_dev(t5, t5_value);
			if ((!current || dirty & /*$message*/ 128) && t7_value !== (t7_value = (/*$message*/ ctx[7].intro || "") + "")) set_data_dev(t7, t7_value);
			if ((!current || dirty & /*$message, locale*/ 132) && t9_value !== (t9_value = (/*$message*/ ctx[7].date && date(/*$message*/ ctx[7].date, /*locale*/ ctx[2])) + "")) set_data_dev(t9, t9_value);

			if (!current || dirty & /*$mailbox, $message*/ 192 && a_href_value !== (a_href_value = "#!/mailbox/" + /*$mailbox*/ ctx[6].id + "/message/" + /*$message*/ ctx[7].id)) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty & /*selected*/ 32) {
				toggle_class(a, "selected", /*selected*/ ctx[5]);
			}

			if (dirty & /*$message*/ 128) {
				toggle_class(a, "unseen", !/*$message*/ ctx[7].seen);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(ripple0.$$.fragment, local);
			transition_in(if_block1);
			transition_in(ripple1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(ripple0.$$.fragment, local);
			transition_out(if_block1);
			transition_out(ripple1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if_blocks[current_block_type_index].d();
			destroy_component(ripple0);
			if_blocks_1[current_block_type_index_1].d();
			destroy_component(ripple1);
			if_block2.d();
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const func = to => to.name || to.address;

function instance$4($$self, $$props, $$invalidate) {
	let $isSelected;

	let $mailbox,
		$$unsubscribe_mailbox = noop,
		$$subscribe_mailbox = () => ($$unsubscribe_mailbox(), $$unsubscribe_mailbox = subscribe(mailbox, $$value => $$invalidate(6, $mailbox = $$value)), mailbox);

	let $message,
		$$unsubscribe_message = noop,
		$$subscribe_message = () => ($$unsubscribe_message(), $$unsubscribe_message = subscribe(message, $$value => $$invalidate(7, $message = $$value)), message);

	let $l;
	$$self.$$.on_destroy.push(() => $$unsubscribe_mailbox());
	$$self.$$.on_destroy.push(() => $$unsubscribe_message());
	const selection = getContext("mailbox-selection");
	const { isSelected, add, remove, toggle } = selection;
	validate_store(isSelected, "isSelected");
	component_subscribe($$self, isSelected, value => $$invalidate(14, $isSelected = value));
	let { message } = $$props;
	validate_store(message, "message");
	$$subscribe_message();
	let { mailbox } = $$props;
	validate_store(mailbox, "mailbox");
	$$subscribe_mailbox();
	let isDraft, isSent, selected;

	const flag$1 = e => {
		flag($mailbox.id, [$message.id], !$message.flagged);
		message.update(m => ({ ...m, flagged: !m.flagged }));
	};

	let unsub;

	const click = async e => {
		if (isDraft) {
			e.preventDefault();

			if (!$message.seen) {
				//mess.updateSeen($mailbox.id, [$message.id], true)
				message.update(m => ({ ...m, seen: true }));
			}

			const $draft = await getDraft($message.id);
			const draft = writable($draft);

			unsub = draft.subscribe(d => {
				message.update(m => ({ ...m, ...d }));
			});

			create(draft);
		}
	};

	onDestroy(() => unsub && unsub());
	const { locale: l } = getContext("app");
	validate_store(l, "l");
	component_subscribe($$self, l, value => $$invalidate(15, $l = value));
	let { locale = $l } = $$props;
	const writable_props = ["message", "mailbox", "locale"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<MailboxMessage> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("MailboxMessage", $$slots, []);
	const click_handler = () => toggle(message);

	$$self.$set = $$props => {
		if ("message" in $$props) $$subscribe_message($$invalidate(0, message = $$props.message));
		if ("mailbox" in $$props) $$subscribe_mailbox($$invalidate(1, mailbox = $$props.mailbox));
		if ("locale" in $$props) $$invalidate(2, locale = $$props.locale);
	};

	$$self.$capture_state = () => ({
		writable,
		slide,
		fly,
		UnFlagged: StarOutline,
		Flagged: Star,
		On: CheckboxBlankOutline,
		Off: CheckboxMarked,
		Ripple: ge,
		getContext,
		onDestroy,
		selection,
		isSelected,
		add,
		remove,
		toggle,
		create,
		drafts,
		sent,
		mess: messages,
		message,
		mailbox,
		isDraft,
		isSent,
		selected,
		flag: flag$1,
		unsub,
		click,
		date,
		l,
		locale,
		$isSelected,
		$mailbox,
		$message,
		$l
	});

	$$self.$inject_state = $$props => {
		if ("message" in $$props) $$subscribe_message($$invalidate(0, message = $$props.message));
		if ("mailbox" in $$props) $$subscribe_mailbox($$invalidate(1, mailbox = $$props.mailbox));
		if ("isDraft" in $$props) $$invalidate(3, isDraft = $$props.isDraft);
		if ("isSent" in $$props) $$invalidate(4, isSent = $$props.isSent);
		if ("selected" in $$props) $$invalidate(5, selected = $$props.selected);
		if ("unsub" in $$props) unsub = $$props.unsub;
		if ("locale" in $$props) $$invalidate(2, locale = $$props.locale);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*mailbox*/ 2) {
			 $$invalidate(3, isDraft = mailbox === drafts);
		}

		if ($$self.$$.dirty & /*mailbox*/ 2) {
			 $$invalidate(4, isSent = mailbox === sent);
		}

		if ($$self.$$.dirty & /*$isSelected, message*/ 16385) {
			 $$invalidate(5, selected = $isSelected(message));
		}
	};

	return [
		message,
		mailbox,
		locale,
		isDraft,
		isSent,
		selected,
		$mailbox,
		$message,
		isSelected,
		toggle,
		flag$1,
		click,
		l,
		unsub,
		$isSelected,
		$l,
		selection,
		add,
		remove,
		click_handler
	];
}

class MailboxMessage extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, { message: 0, mailbox: 1, locale: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MailboxMessage",
			options,
			id: create_fragment$4.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*message*/ ctx[0] === undefined && !("message" in props)) {
			console.warn("<MailboxMessage> was created without expected prop 'message'");
		}

		if (/*mailbox*/ ctx[1] === undefined && !("mailbox" in props)) {
			console.warn("<MailboxMessage> was created without expected prop 'mailbox'");
		}
	}

	get message() {
		throw new Error("<MailboxMessage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set message(value) {
		throw new Error("<MailboxMessage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get mailbox() {
		throw new Error("<MailboxMessage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set mailbox(value) {
		throw new Error("<MailboxMessage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get locale() {
		throw new Error("<MailboxMessage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set locale(value) {
		throw new Error("<MailboxMessage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/svelte-material-icons/Refresh.svelte generated by Svelte v3.21.0 */

const file$5 = "node_modules/svelte-material-icons/Refresh.svelte";

function create_fragment$5(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M17.65,6.35C16.2,4.9 14.21,4 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20C15.73,20 18.84,17.45 19.73,14H17.65C16.83,16.33 14.61,18 12,18A6,6 0 0,1 6,12A6,6 0 0,1 12,6C13.66,6 15.14,6.69 16.22,7.78L13,11H20V4L17.65,6.35Z");
			attr_dev(path, "fill", /*color*/ ctx[2]);
			add_location(path, file$5, 8, 59, 234);
			attr_dev(svg, "width", /*width*/ ctx[0]);
			attr_dev(svg, "height", /*height*/ ctx[1]);
			attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			add_location(svg, file$5, 8, 0, 175);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*color*/ 4) {
				attr_dev(path, "fill", /*color*/ ctx[2]);
			}

			if (dirty & /*width*/ 1) {
				attr_dev(svg, "width", /*width*/ ctx[0]);
			}

			if (dirty & /*height*/ 2) {
				attr_dev(svg, "height", /*height*/ ctx[1]);
			}

			if (dirty & /*viewBox*/ 8) {
				attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let { size = "1em" } = $$props;
	let { width = size } = $$props;
	let { height = size } = $$props;
	let { color = "currentColor" } = $$props;
	let { viewBox = "0 0 24 24" } = $$props;
	const writable_props = ["size", "width", "height", "color", "viewBox"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Refresh> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Refresh", $$slots, []);

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	$$self.$capture_state = () => ({ size, width, height, color, viewBox });

	$$self.$inject_state = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [width, height, color, viewBox, size];
}

class Refresh extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
			size: 4,
			width: 0,
			height: 1,
			color: 2,
			viewBox: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Refresh",
			options,
			id: create_fragment$5.name
		});
	}

	get size() {
		throw new Error("<Refresh>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Refresh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<Refresh>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Refresh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<Refresh>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<Refresh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<Refresh>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<Refresh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get viewBox() {
		throw new Error("<Refresh>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set viewBox(value) {
		throw new Error("<Refresh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/svelte-material-icons/CheckboxIntermediate.svelte generated by Svelte v3.21.0 */

const file$6 = "node_modules/svelte-material-icons/CheckboxIntermediate.svelte";

function create_fragment$6(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M19,19H5V5H19V19M17,17H7V7H17V17Z");
			attr_dev(path, "fill", /*color*/ ctx[2]);
			add_location(path, file$6, 8, 59, 234);
			attr_dev(svg, "width", /*width*/ ctx[0]);
			attr_dev(svg, "height", /*height*/ ctx[1]);
			attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			add_location(svg, file$6, 8, 0, 175);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*color*/ 4) {
				attr_dev(path, "fill", /*color*/ ctx[2]);
			}

			if (dirty & /*width*/ 1) {
				attr_dev(svg, "width", /*width*/ ctx[0]);
			}

			if (dirty & /*height*/ 2) {
				attr_dev(svg, "height", /*height*/ ctx[1]);
			}

			if (dirty & /*viewBox*/ 8) {
				attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	let { size = "1em" } = $$props;
	let { width = size } = $$props;
	let { height = size } = $$props;
	let { color = "currentColor" } = $$props;
	let { viewBox = "0 0 24 24" } = $$props;
	const writable_props = ["size", "width", "height", "color", "viewBox"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CheckboxIntermediate> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("CheckboxIntermediate", $$slots, []);

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	$$self.$capture_state = () => ({ size, width, height, color, viewBox });

	$$self.$inject_state = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [width, height, color, viewBox, size];
}

class CheckboxIntermediate extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
			size: 4,
			width: 0,
			height: 1,
			color: 2,
			viewBox: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CheckboxIntermediate",
			options,
			id: create_fragment$6.name
		});
	}

	get size() {
		throw new Error("<CheckboxIntermediate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<CheckboxIntermediate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<CheckboxIntermediate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<CheckboxIntermediate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<CheckboxIntermediate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<CheckboxIntermediate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<CheckboxIntermediate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<CheckboxIntermediate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get viewBox() {
		throw new Error("<CheckboxIntermediate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set viewBox(value) {
		throw new Error("<CheckboxIntermediate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/svelte-material-icons/CheckCircle.svelte generated by Svelte v3.21.0 */

const file$7 = "node_modules/svelte-material-icons/CheckCircle.svelte";

function create_fragment$7(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M10 17L5 12L6.41 10.59L10 14.17L17.59 6.58L19 8L10 17Z");
			attr_dev(path, "fill", /*color*/ ctx[2]);
			add_location(path, file$7, 8, 59, 234);
			attr_dev(svg, "width", /*width*/ ctx[0]);
			attr_dev(svg, "height", /*height*/ ctx[1]);
			attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			add_location(svg, file$7, 8, 0, 175);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*color*/ 4) {
				attr_dev(path, "fill", /*color*/ ctx[2]);
			}

			if (dirty & /*width*/ 1) {
				attr_dev(svg, "width", /*width*/ ctx[0]);
			}

			if (dirty & /*height*/ 2) {
				attr_dev(svg, "height", /*height*/ ctx[1]);
			}

			if (dirty & /*viewBox*/ 8) {
				attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$7.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$7($$self, $$props, $$invalidate) {
	let { size = "1em" } = $$props;
	let { width = size } = $$props;
	let { height = size } = $$props;
	let { color = "currentColor" } = $$props;
	let { viewBox = "0 0 24 24" } = $$props;
	const writable_props = ["size", "width", "height", "color", "viewBox"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CheckCircle> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("CheckCircle", $$slots, []);

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	$$self.$capture_state = () => ({ size, width, height, color, viewBox });

	$$self.$inject_state = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [width, height, color, viewBox, size];
}

class CheckCircle extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
			size: 4,
			width: 0,
			height: 1,
			color: 2,
			viewBox: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CheckCircle",
			options,
			id: create_fragment$7.name
		});
	}

	get size() {
		throw new Error("<CheckCircle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<CheckCircle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<CheckCircle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<CheckCircle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<CheckCircle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<CheckCircle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<CheckCircle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<CheckCircle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get viewBox() {
		throw new Error("<CheckCircle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set viewBox(value) {
		throw new Error("<CheckCircle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/svelte-material-icons/Check.svelte generated by Svelte v3.21.0 */

const file$8 = "node_modules/svelte-material-icons/Check.svelte";

function create_fragment$8(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z");
			attr_dev(path, "fill", /*color*/ ctx[2]);
			add_location(path, file$8, 8, 59, 234);
			attr_dev(svg, "width", /*width*/ ctx[0]);
			attr_dev(svg, "height", /*height*/ ctx[1]);
			attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			add_location(svg, file$8, 8, 0, 175);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*color*/ 4) {
				attr_dev(path, "fill", /*color*/ ctx[2]);
			}

			if (dirty & /*width*/ 1) {
				attr_dev(svg, "width", /*width*/ ctx[0]);
			}

			if (dirty & /*height*/ 2) {
				attr_dev(svg, "height", /*height*/ ctx[1]);
			}

			if (dirty & /*viewBox*/ 8) {
				attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$8.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$8($$self, $$props, $$invalidate) {
	let { size = "1em" } = $$props;
	let { width = size } = $$props;
	let { height = size } = $$props;
	let { color = "currentColor" } = $$props;
	let { viewBox = "0 0 24 24" } = $$props;
	const writable_props = ["size", "width", "height", "color", "viewBox"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Check> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Check", $$slots, []);

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	$$self.$capture_state = () => ({ size, width, height, color, viewBox });

	$$self.$inject_state = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [width, height, color, viewBox, size];
}

class Check extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
			size: 4,
			width: 0,
			height: 1,
			color: 2,
			viewBox: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Check",
			options,
			id: create_fragment$8.name
		});
	}

	get size() {
		throw new Error("<Check>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Check>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<Check>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Check>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<Check>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<Check>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<Check>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<Check>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get viewBox() {
		throw new Error("<Check>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set viewBox(value) {
		throw new Error("<Check>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/svelte-material-icons/Plus.svelte generated by Svelte v3.21.0 */

const file$9 = "node_modules/svelte-material-icons/Plus.svelte";

function create_fragment$9(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z");
			attr_dev(path, "fill", /*color*/ ctx[2]);
			add_location(path, file$9, 8, 59, 234);
			attr_dev(svg, "width", /*width*/ ctx[0]);
			attr_dev(svg, "height", /*height*/ ctx[1]);
			attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			add_location(svg, file$9, 8, 0, 175);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*color*/ 4) {
				attr_dev(path, "fill", /*color*/ ctx[2]);
			}

			if (dirty & /*width*/ 1) {
				attr_dev(svg, "width", /*width*/ ctx[0]);
			}

			if (dirty & /*height*/ 2) {
				attr_dev(svg, "height", /*height*/ ctx[1]);
			}

			if (dirty & /*viewBox*/ 8) {
				attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$9.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$9($$self, $$props, $$invalidate) {
	let { size = "1em" } = $$props;
	let { width = size } = $$props;
	let { height = size } = $$props;
	let { color = "currentColor" } = $$props;
	let { viewBox = "0 0 24 24" } = $$props;
	const writable_props = ["size", "width", "height", "color", "viewBox"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Plus> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Plus", $$slots, []);

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	$$self.$capture_state = () => ({ size, width, height, color, viewBox });

	$$self.$inject_state = $$props => {
		if ("size" in $$props) $$invalidate(4, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("viewBox" in $$props) $$invalidate(3, viewBox = $$props.viewBox);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [width, height, color, viewBox, size];
}

class Plus extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
			size: 4,
			width: 0,
			height: 1,
			color: 2,
			viewBox: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Plus",
			options,
			id: create_fragment$9.name
		});
	}

	get size() {
		throw new Error("<Plus>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Plus>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<Plus>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Plus>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<Plus>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<Plus>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<Plus>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<Plus>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get viewBox() {
		throw new Error("<Plus>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set viewBox(value) {
		throw new Error("<Plus>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/comp/Pages/Mailbox/Mailbox.svelte generated by Svelte v3.21.0 */
const file$a = "src/comp/Pages/Mailbox/Mailbox.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[39] = list[i];
	return child_ctx;
}

// (266:8) {:else}
function create_else_block_2$1(ctx) {
	let current;
	const checksome = new CheckboxIntermediate({ $$inline: true });

	const block = {
		c: function create() {
			create_component(checksome.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(checksome, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(checksome.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(checksome.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(checksome, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2$1.name,
		type: "else",
		source: "(266:8) {:else}",
		ctx
	});

	return block;
}

// (264:57) 
function create_if_block_9(ctx) {
	let current;
	const checkall = new CheckboxMarked({ $$inline: true });

	const block = {
		c: function create() {
			create_component(checkall.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(checkall, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(checkall.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(checkall.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(checkall, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_9.name,
		type: "if",
		source: "(264:57) ",
		ctx
	});

	return block;
}

// (262:8) {#if $selection.length === 0}
function create_if_block_8(ctx) {
	let current;
	const checknone = new CheckboxBlankOutline({ $$inline: true });

	const block = {
		c: function create() {
			create_component(checknone.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(checknone, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(checknone.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(checknone.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(checknone, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(262:8) {#if $selection.length === 0}",
		ctx
	});

	return block;
}

// (279:4) {#if $selection.length !== 0}
function create_if_block_4(ctx) {
	let div;
	let x_action_group0;
	let show_if;
	let current_block_type_index;
	let if_block0;
	let t0;
	let current_block_type_index_1;
	let if_block1;
	let t1;
	let x_action;
	let t2;
	let x_action_data_tooltip_value;
	let t3;
	let x_action_group1;
	let t4;
	let x_selection_info;
	let t5;
	let span;
	let t6_value = /*$trans*/ ctx[18]("selection.title", { n: /*$selection*/ ctx[13].length }) + "";
	let t6;
	let div_transition;
	let current;
	let dispose;
	const if_block_creators = [create_if_block_7, create_else_block_1$1];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (dirty[0] & /*$selection*/ 8192) show_if = !!/*$selection*/ ctx[13].every(func$1);
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx, [-1]);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const if_block_creators_1 = [create_if_block_5, create_if_block_6];
	const if_blocks_1 = [];

	function select_block_type_2(ctx, dirty) {
		if (/*isJunk*/ ctx[6]) return 0;
		if (!/*isDraft*/ ctx[8] && !/*isSent*/ ctx[9] && !/*isTrash*/ ctx[7]) return 1;
		return -1;
	}

	if (~(current_block_type_index_1 = select_block_type_2(ctx))) {
		if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
	}

	const delete_1 = new Delete({ $$inline: true });
	const ripple = new ge({ $$inline: true });

	const moveto = new MoveTo({
			props: {
				mailbox: /*mailbox*/ ctx[0],
				selection: /*selection*/ ctx[3]
			},
			$$inline: true
		});

	moveto.$on("moved", /*onSelectionMoved*/ ctx[20]);
	const check = new Check({ $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			x_action_group0 = element("x-action-group");
			if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			x_action = element("x-action");
			create_component(delete_1.$$.fragment);
			t2 = space();
			create_component(ripple.$$.fragment);
			t3 = space();
			x_action_group1 = element("x-action-group");
			create_component(moveto.$$.fragment);
			t4 = space();
			x_selection_info = element("x-selection-info");
			create_component(check.$$.fragment);
			t5 = space();
			span = element("span");
			t6 = text(t6_value);
			set_custom_element_data(x_action, "class", "btn-dark");

			set_custom_element_data(x_action, "data-tooltip", x_action_data_tooltip_value = /*isTrash*/ ctx[7]
			? /*locale*/ ctx[5].actions.deletePermanently
			: /*isDraft*/ ctx[8]
				? /*locale*/ ctx[5].actions.discardDrafts
				: /*locale*/ ctx[5].actions.delete);

			add_location(x_action, file$a, 305, 10, 8228);
			add_location(x_action_group0, file$a, 280, 8, 7245);
			add_location(x_action_group1, file$a, 316, 8, 8560);
			attr_dev(span, "class", "svelte-1r6iio1");
			add_location(span, file$a, 322, 10, 8733);
			set_custom_element_data(x_selection_info, "class", "svelte-1r6iio1");
			add_location(x_selection_info, file$a, 320, 8, 8684);
			attr_dev(div, "class", "only-when-selection svelte-1r6iio1");
			add_location(div, file$a, 279, 6, 7163);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, x_action_group0);
			if_blocks[current_block_type_index].m(x_action_group0, null);
			append_dev(x_action_group0, t0);

			if (~current_block_type_index_1) {
				if_blocks_1[current_block_type_index_1].m(x_action_group0, null);
			}

			append_dev(x_action_group0, t1);
			append_dev(x_action_group0, x_action);
			mount_component(delete_1, x_action, null);
			append_dev(x_action, t2);
			mount_component(ripple, x_action, null);
			append_dev(div, t3);
			append_dev(div, x_action_group1);
			mount_component(moveto, x_action_group1, null);
			append_dev(div, t4);
			append_dev(div, x_selection_info);
			mount_component(check, x_selection_info, null);
			append_dev(x_selection_info, t5);
			append_dev(x_selection_info, span);
			append_dev(span, t6);
			current = true;
			if (remount) dispose();
			dispose = listen_dev(x_action, "click", /*click_handler_4*/ ctx[37], false, false, false);
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				}

				transition_in(if_block0, 1);
				if_block0.m(x_action_group0, t0);
			}

			let previous_block_index_1 = current_block_type_index_1;
			current_block_type_index_1 = select_block_type_2(ctx);

			if (current_block_type_index_1 === previous_block_index_1) {
				if (~current_block_type_index_1) {
					if_blocks_1[current_block_type_index_1].p(ctx, dirty);
				}
			} else {
				if (if_block1) {
					group_outros();

					transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
						if_blocks_1[previous_block_index_1] = null;
					});

					check_outros();
				}

				if (~current_block_type_index_1) {
					if_block1 = if_blocks_1[current_block_type_index_1];

					if (!if_block1) {
						if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
						if_block1.c();
					}

					transition_in(if_block1, 1);
					if_block1.m(x_action_group0, t1);
				} else {
					if_block1 = null;
				}
			}

			if (!current || dirty[0] & /*isTrash, locale, isDraft*/ 416 && x_action_data_tooltip_value !== (x_action_data_tooltip_value = /*isTrash*/ ctx[7]
			? /*locale*/ ctx[5].actions.deletePermanently
			: /*isDraft*/ ctx[8]
				? /*locale*/ ctx[5].actions.discardDrafts
				: /*locale*/ ctx[5].actions.delete)) {
				set_custom_element_data(x_action, "data-tooltip", x_action_data_tooltip_value);
			}

			const moveto_changes = {};
			if (dirty[0] & /*mailbox*/ 1) moveto_changes.mailbox = /*mailbox*/ ctx[0];
			if (dirty[0] & /*selection*/ 8) moveto_changes.selection = /*selection*/ ctx[3];
			moveto.$set(moveto_changes);
			if ((!current || dirty[0] & /*$trans, $selection*/ 270336) && t6_value !== (t6_value = /*$trans*/ ctx[18]("selection.title", { n: /*$selection*/ ctx[13].length }) + "")) set_data_dev(t6, t6_value);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(delete_1.$$.fragment, local);
			transition_in(ripple.$$.fragment, local);
			transition_in(moveto.$$.fragment, local);
			transition_in(check.$$.fragment, local);

			if (local) {
				add_render_callback(() => {
					if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { duration: 150 }, true);
					div_transition.run(1);
				});
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(delete_1.$$.fragment, local);
			transition_out(ripple.$$.fragment, local);
			transition_out(moveto.$$.fragment, local);
			transition_out(check.$$.fragment, local);

			if (local) {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { duration: 150 }, false);
				div_transition.run(0);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_blocks[current_block_type_index].d();

			if (~current_block_type_index_1) {
				if_blocks_1[current_block_type_index_1].d();
			}

			destroy_component(delete_1);
			destroy_component(ripple);
			destroy_component(moveto);
			destroy_component(check);
			if (detaching && div_transition) div_transition.end();
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(279:4) {#if $selection.length !== 0}",
		ctx
	});

	return block;
}

// (287:10) {:else}
function create_else_block_1$1(ctx) {
	let x_action;
	let t;
	let x_action_data_tooltip_value;
	let current;
	let dispose;
	const markunseen = new MarkUnseen({ $$inline: true });
	const ripple = new ge({ $$inline: true });

	const block = {
		c: function create() {
			x_action = element("x-action");
			create_component(markunseen.$$.fragment);
			t = space();
			create_component(ripple.$$.fragment);
			set_custom_element_data(x_action, "class", "btn-dark");
			set_custom_element_data(x_action, "data-tooltip", x_action_data_tooltip_value = /*locale*/ ctx[5].actions.markAsUnread);
			add_location(x_action, file$a, 287, 12, 7537);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, x_action, anchor);
			mount_component(markunseen, x_action, null);
			append_dev(x_action, t);
			mount_component(ripple, x_action, null);
			current = true;
			if (remount) dispose();
			dispose = listen_dev(x_action, "click", /*click_handler_1*/ ctx[34], false, false, false);
		},
		p: function update(ctx, dirty) {
			if (!current || dirty[0] & /*locale*/ 32 && x_action_data_tooltip_value !== (x_action_data_tooltip_value = /*locale*/ ctx[5].actions.markAsUnread)) {
				set_custom_element_data(x_action, "data-tooltip", x_action_data_tooltip_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(markunseen.$$.fragment, local);
			transition_in(ripple.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(markunseen.$$.fragment, local);
			transition_out(ripple.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_action);
			destroy_component(markunseen);
			destroy_component(ripple);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1$1.name,
		type: "else",
		source: "(287:10) {:else}",
		ctx
	});

	return block;
}

// (282:10) {#if $selection.every(m => !m.get().seen)}
function create_if_block_7(ctx) {
	let x_action;
	let t;
	let x_action_data_tooltip_value;
	let current;
	let dispose;
	const markseen = new MarkSeen({ $$inline: true });
	const ripple = new ge({ $$inline: true });

	const block = {
		c: function create() {
			x_action = element("x-action");
			create_component(markseen.$$.fragment);
			t = space();
			create_component(ripple.$$.fragment);
			set_custom_element_data(x_action, "class", "btn-dark");
			set_custom_element_data(x_action, "data-tooltip", x_action_data_tooltip_value = /*locale*/ ctx[5].actions.markAsRead);
			add_location(x_action, file$a, 282, 12, 7327);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, x_action, anchor);
			mount_component(markseen, x_action, null);
			append_dev(x_action, t);
			mount_component(ripple, x_action, null);
			current = true;
			if (remount) dispose();
			dispose = listen_dev(x_action, "click", /*click_handler*/ ctx[33], false, false, false);
		},
		p: function update(ctx, dirty) {
			if (!current || dirty[0] & /*locale*/ 32 && x_action_data_tooltip_value !== (x_action_data_tooltip_value = /*locale*/ ctx[5].actions.markAsRead)) {
				set_custom_element_data(x_action, "data-tooltip", x_action_data_tooltip_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(markseen.$$.fragment, local);
			transition_in(ripple.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(markseen.$$.fragment, local);
			transition_out(ripple.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_action);
			destroy_component(markseen);
			destroy_component(ripple);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(282:10) {#if $selection.every(m => !m.get().seen)}",
		ctx
	});

	return block;
}

// (299:52) 
function create_if_block_6(ctx) {
	let x_action;
	let t;
	let x_action_data_tooltip_value;
	let current;
	let dispose;
	const markspam = new MarkSpam({ $$inline: true });
	const ripple = new ge({ $$inline: true });

	const block = {
		c: function create() {
			x_action = element("x-action");
			create_component(markspam.$$.fragment);
			t = space();
			create_component(ripple.$$.fragment);
			set_custom_element_data(x_action, "class", "btn-dark");
			set_custom_element_data(x_action, "data-tooltip", x_action_data_tooltip_value = /*locale*/ ctx[5].actions.markAsSpam);
			add_location(x_action, file$a, 299, 12, 8022);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, x_action, anchor);
			mount_component(markspam, x_action, null);
			append_dev(x_action, t);
			mount_component(ripple, x_action, null);
			current = true;
			if (remount) dispose();
			dispose = listen_dev(x_action, "click", /*click_handler_3*/ ctx[36], false, false, false);
		},
		p: function update(ctx, dirty) {
			if (!current || dirty[0] & /*locale*/ 32 && x_action_data_tooltip_value !== (x_action_data_tooltip_value = /*locale*/ ctx[5].actions.markAsSpam)) {
				set_custom_element_data(x_action, "data-tooltip", x_action_data_tooltip_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(markspam.$$.fragment, local);
			transition_in(ripple.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(markspam.$$.fragment, local);
			transition_out(ripple.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_action);
			destroy_component(markspam);
			destroy_component(ripple);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(299:52) ",
		ctx
	});

	return block;
}

// (294:10) {#if isJunk}
function create_if_block_5(ctx) {
	let x_action;
	let t;
	let x_action_data_tooltip_value;
	let current;
	let dispose;
	const unmarkspam = new UnMarkSpam({ $$inline: true });
	const ripple = new ge({ $$inline: true });

	const block = {
		c: function create() {
			x_action = element("x-action");
			create_component(unmarkspam.$$.fragment);
			t = space();
			create_component(ripple.$$.fragment);
			set_custom_element_data(x_action, "class", "btn-dark");
			set_custom_element_data(x_action, "data-tooltip", x_action_data_tooltip_value = /*locale*/ ctx[5].actions.unMarkAsSpam);
			add_location(x_action, file$a, 294, 12, 7773);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, x_action, anchor);
			mount_component(unmarkspam, x_action, null);
			append_dev(x_action, t);
			mount_component(ripple, x_action, null);
			current = true;
			if (remount) dispose();
			dispose = listen_dev(x_action, "click", /*click_handler_2*/ ctx[35], false, false, false);
		},
		p: function update(ctx, dirty) {
			if (!current || dirty[0] & /*locale*/ 32 && x_action_data_tooltip_value !== (x_action_data_tooltip_value = /*locale*/ ctx[5].actions.unMarkAsSpam)) {
				set_custom_element_data(x_action, "data-tooltip", x_action_data_tooltip_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(unmarkspam.$$.fragment, local);
			transition_in(ripple.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(unmarkspam.$$.fragment, local);
			transition_out(ripple.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_action);
			destroy_component(unmarkspam);
			destroy_component(ripple);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(294:10) {#if isJunk}",
		ctx
	});

	return block;
}

// (257:2) <Topbar scrolled={$scroll !== 0}>
function create_default_slot_1(ctx) {
	let x_action_group;
	let x_action0;
	let t0;
	let current_block_type_index;
	let if_block0;
	let x_action0_data_tooltip_value;
	let t1;
	let x_action1;
	let div;
	let t2;
	let x_action1_data_tooltip_value;
	let t3;
	let if_block1_anchor;
	let current;
	let dispose;
	const ripple0 = new ge({ $$inline: true });
	const if_block_creators = [create_if_block_8, create_if_block_9, create_else_block_2$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$selection*/ ctx[13].length === 0) return 0;
		if (/*$selection*/ ctx[13].length === /*$messages*/ ctx[14].length) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const refresh = new Refresh({ $$inline: true });
	const ripple1 = new ge({ $$inline: true });
	let if_block1 = /*$selection*/ ctx[13].length !== 0 && create_if_block_4(ctx);

	const block = {
		c: function create() {
			x_action_group = element("x-action-group");
			x_action0 = element("x-action");
			create_component(ripple0.$$.fragment);
			t0 = space();
			if_block0.c();
			t1 = space();
			x_action1 = element("x-action");
			div = element("div");
			create_component(refresh.$$.fragment);
			t2 = space();
			create_component(ripple1.$$.fragment);
			t3 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			set_custom_element_data(x_action0, "class", "btn-dark");
			set_custom_element_data(x_action0, "data-tooltip", x_action0_data_tooltip_value = /*locale*/ ctx[5].actions.select);
			add_location(x_action0, file$a, 259, 6, 6489);
			set_style(div, "display", "flex");
			set_style(div, "transition", "transform 300ms ease");
			set_style(div, "transform", "rotate(" + 360 * /*reloadTimes*/ ctx[10] + "deg)");
			add_location(div, file$a, 271, 8, 6920);
			set_custom_element_data(x_action1, "class", "btn-dark reload");
			set_custom_element_data(x_action1, "data-tooltip", x_action1_data_tooltip_value = /*locale*/ ctx[5].actions.reload);
			add_location(x_action1, file$a, 270, 6, 6822);
			set_custom_element_data(x_action_group, "class", "select svelte-1r6iio1");
			add_location(x_action_group, file$a, 258, 4, 6451);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, x_action_group, anchor);
			append_dev(x_action_group, x_action0);
			mount_component(ripple0, x_action0, null);
			append_dev(x_action0, t0);
			if_blocks[current_block_type_index].m(x_action0, null);
			append_dev(x_action_group, t1);
			append_dev(x_action_group, x_action1);
			append_dev(x_action1, div);
			mount_component(refresh, div, null);
			append_dev(x_action1, t2);
			mount_component(ripple1, x_action1, null);
			insert_dev(target, t3, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
			current = true;
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(x_action0, "click", /*handleSelection*/ ctx[19], false, false, false),
				listen_dev(x_action1, "click", /*reload*/ ctx[24], false, false, false)
			];
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				}

				transition_in(if_block0, 1);
				if_block0.m(x_action0, null);
			}

			if (!current || dirty[0] & /*locale*/ 32 && x_action0_data_tooltip_value !== (x_action0_data_tooltip_value = /*locale*/ ctx[5].actions.select)) {
				set_custom_element_data(x_action0, "data-tooltip", x_action0_data_tooltip_value);
			}

			if (!current || dirty[0] & /*reloadTimes*/ 1024) {
				set_style(div, "transform", "rotate(" + 360 * /*reloadTimes*/ ctx[10] + "deg)");
			}

			if (!current || dirty[0] & /*locale*/ 32 && x_action1_data_tooltip_value !== (x_action1_data_tooltip_value = /*locale*/ ctx[5].actions.reload)) {
				set_custom_element_data(x_action1, "data-tooltip", x_action1_data_tooltip_value);
			}

			if (/*$selection*/ ctx[13].length !== 0) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*$selection*/ 8192) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_4(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(ripple0.$$.fragment, local);
			transition_in(if_block0);
			transition_in(refresh.$$.fragment, local);
			transition_in(ripple1.$$.fragment, local);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(ripple0.$$.fragment, local);
			transition_out(if_block0);
			transition_out(refresh.$$.fragment, local);
			transition_out(ripple1.$$.fragment, local);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_action_group);
			destroy_component(ripple0);
			if_blocks[current_block_type_index].d();
			destroy_component(refresh);
			destroy_component(ripple1);
			if (detaching) detach_dev(t3);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(if_block1_anchor);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(257:2) <Topbar scrolled={$scroll !== 0}>",
		ctx
	});

	return block;
}

// (335:4) {:else}
function create_else_block$1(ctx) {
	let if_block_anchor;
	let if_block = !/*loadingMore*/ ctx[11] && create_if_block_3(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (!/*loadingMore*/ ctx[11]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(335:4) {:else}",
		ctx
	});

	return block;
}

// (336:6) {#if !loadingMore}
function create_if_block_3(ctx) {
	let x_mailbox_empty;
	let span;
	let t_value = /*locale*/ ctx[5].mailbox.empty + "";
	let t;

	const block = {
		c: function create() {
			x_mailbox_empty = element("x-mailbox-empty");
			span = element("span");
			t = text(t_value);
			attr_dev(span, "class", "label svelte-1r6iio1");
			add_location(span, file$a, 337, 10, 9240);
			set_custom_element_data(x_mailbox_empty, "class", "svelte-1r6iio1");
			add_location(x_mailbox_empty, file$a, 336, 8, 9212);
		},
		m: function mount(target, anchor) {
			insert_dev(target, x_mailbox_empty, anchor);
			append_dev(x_mailbox_empty, span);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*locale*/ 32 && t_value !== (t_value = /*locale*/ ctx[5].mailbox.empty + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_mailbox_empty);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(336:6) {#if !loadingMore}",
		ctx
	});

	return block;
}

// (331:4) {#each $messages as message (`${$mailbox.id}
function create_each_block(key_1, ctx) {
	let x_mailbox_message;
	let x_mailbox_message_intro;
	let x_mailbox_message_outro;
	let current;

	const item = new MailboxMessage({
			props: {
				message: /*message*/ ctx[39],
				mailbox: /*mailbox*/ ctx[0]
			},
			$$inline: true
		});

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			x_mailbox_message = element("x-mailbox-message");
			create_component(item.$$.fragment);
			set_custom_element_data(x_mailbox_message, "class", "svelte-1r6iio1");
			add_location(x_mailbox_message, file$a, 331, 8, 9017);
			this.first = x_mailbox_message;
		},
		m: function mount(target, anchor) {
			insert_dev(target, x_mailbox_message, anchor);
			mount_component(item, x_mailbox_message, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const item_changes = {};
			if (dirty[0] & /*$messages*/ 16384) item_changes.message = /*message*/ ctx[39];
			if (dirty[0] & /*mailbox*/ 1) item_changes.mailbox = /*mailbox*/ ctx[0];
			item.$set(item_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(item.$$.fragment, local);

			if (local) {
				add_render_callback(() => {
					if (x_mailbox_message_outro) x_mailbox_message_outro.end(1);
					if (!x_mailbox_message_intro) x_mailbox_message_intro = create_in_transition(x_mailbox_message, /*flyInsert*/ ctx[26], { duration: 150 });
					x_mailbox_message_intro.start();
				});
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(item.$$.fragment, local);
			if (x_mailbox_message_intro) x_mailbox_message_intro.invalidate();

			if (local) {
				x_mailbox_message_outro = create_out_transition(x_mailbox_message, /*flyRemove*/ ctx[27], {});
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_mailbox_message);
			destroy_component(item);
			if (detaching && x_mailbox_message_outro) x_mailbox_message_outro.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(331:4) {#each $messages as message (`${$mailbox.id}",
		ctx
	});

	return block;
}

// (343:4) {#if loadingMore || $next}
function create_if_block$1(ctx) {
	let x_loadmore;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block_1$1, create_if_block_2$1];
	const if_blocks = [];

	function select_block_type_3(ctx, dirty) {
		if (/*loadingMore*/ ctx[11]) return 0;
		if (/*$next*/ ctx[16]) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type_3(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			x_loadmore = element("x-loadmore");
			if (if_block) if_block.c();
			set_custom_element_data(x_loadmore, "class", "svelte-1r6iio1");
			add_location(x_loadmore, file$a, 343, 6, 9383);
		},
		m: function mount(target, anchor) {
			insert_dev(target, x_loadmore, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(x_loadmore, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_3(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					}

					transition_in(if_block, 1);
					if_block.m(x_loadmore, null);
				} else {
					if_block = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_loadmore);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(343:4) {#if loadingMore || $next}",
		ctx
	});

	return block;
}

// (349:24) 
function create_if_block_2$1(ctx) {
	let x_loadmore_button;
	let t;
	let x_loadmore_button_intro;
	let current;
	let dispose;
	const more = new Plus({ $$inline: true });
	const ripple = new ge({ $$inline: true });

	const block = {
		c: function create() {
			x_loadmore_button = element("x-loadmore-button");
			create_component(more.$$.fragment);
			t = space();
			create_component(ripple.$$.fragment);
			set_custom_element_data(x_loadmore_button, "class", "btn-dark svelte-1r6iio1");
			add_location(x_loadmore_button, file$a, 349, 10, 9610);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, x_loadmore_button, anchor);
			mount_component(more, x_loadmore_button, null);
			append_dev(x_loadmore_button, t);
			mount_component(ripple, x_loadmore_button, null);
			current = true;
			if (remount) dispose();
			dispose = listen_dev(x_loadmore_button, "click", /*loadMore*/ ctx[25], false, false, false);
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(more.$$.fragment, local);
			transition_in(ripple.$$.fragment, local);

			if (local) {
				if (!x_loadmore_button_intro) {
					add_render_callback(() => {
						x_loadmore_button_intro = create_in_transition(x_loadmore_button, fade, { delay: 150, duration: 150 });
						x_loadmore_button_intro.start();
					});
				}
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(more.$$.fragment, local);
			transition_out(ripple.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_loadmore_button);
			destroy_component(more);
			destroy_component(ripple);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(349:24) ",
		ctx
	});

	return block;
}

// (345:8) {#if loadingMore}
function create_if_block_1$1(ctx) {
	let x_loadmore_loading;
	let x_loadmore_loading_intro;
	let current;

	const circularprogress = new CircularProgress({
			props: { size: "0.75em" },
			$$inline: true
		});

	const block = {
		c: function create() {
			x_loadmore_loading = element("x-loadmore-loading");
			create_component(circularprogress.$$.fragment);
			set_custom_element_data(x_loadmore_loading, "class", "svelte-1r6iio1");
			add_location(x_loadmore_loading, file$a, 345, 10, 9432);
		},
		m: function mount(target, anchor) {
			insert_dev(target, x_loadmore_loading, anchor);
			mount_component(circularprogress, x_loadmore_loading, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(circularprogress.$$.fragment, local);

			if (local) {
				if (!x_loadmore_loading_intro) {
					add_render_callback(() => {
						x_loadmore_loading_intro = create_in_transition(x_loadmore_loading, fade, { delay: 150, duration: 150 });
						x_loadmore_loading_intro.start();
					});
				}
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(circularprogress.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(x_loadmore_loading);
			destroy_component(circularprogress);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(345:8) {#if loadingMore}",
		ctx
	});

	return block;
}

// (256:0) <Tab>
function create_default_slot(ctx) {
	let t0;
	let x_tab_content;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t1;
	let current;
	let dispose;

	const topbar = new Topbar({
			props: {
				scrolled: /*$scroll*/ ctx[17] !== 0,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let each_value = /*$messages*/ ctx[14];
	validate_each_argument(each_value);
	const get_key = ctx => `${/*$mailbox*/ ctx[15].id}-${/*message*/ ctx[39].get().id}`;
	validate_each_keys(ctx, each_value, get_each_context, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	let each_1_else = null;

	if (!each_value.length) {
		each_1_else = create_else_block$1(ctx);
	}

	let if_block = (/*loadingMore*/ ctx[11] || /*$next*/ ctx[16]) && create_if_block$1(ctx);

	const block = {
		c: function create() {
			create_component(topbar.$$.fragment);
			t0 = space();
			x_tab_content = element("x-tab-content");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			if (each_1_else) {
				each_1_else.c();
			}

			t1 = space();
			if (if_block) if_block.c();
			set_custom_element_data(x_tab_content, "class", "svelte-1r6iio1");
			add_location(x_tab_content, file$a, 329, 2, 8867);
		},
		m: function mount(target, anchor, remount) {
			mount_component(topbar, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, x_tab_content, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(x_tab_content, null);
			}

			if (each_1_else) {
				each_1_else.m(x_tab_content, null);
			}

			append_dev(x_tab_content, t1);
			if (if_block) if_block.m(x_tab_content, null);
			current = true;
			if (remount) dispose();
			dispose = listen_dev(x_tab_content, "scroll", /*scroll_handler*/ ctx[38], false, false, false);
		},
		p: function update(ctx, dirty) {
			const topbar_changes = {};
			if (dirty[0] & /*$scroll*/ 131072) topbar_changes.scrolled = /*$scroll*/ ctx[17] !== 0;

			if (dirty[0] & /*$trans, $selection, mailbox, selection, isTrash, locale, isDraft, isJunk, isSent, reloadTimes, $messages*/ 288745 | dirty[1] & /*$$scope*/ 2048) {
				topbar_changes.$$scope = { dirty, ctx };
			}

			topbar.$set(topbar_changes);

			if (dirty[0] & /*$messages, mailbox, locale, loadingMore*/ 18465) {
				const each_value = /*$messages*/ ctx[14];
				validate_each_argument(each_value);
				group_outros();
				validate_each_keys(ctx, each_value, get_each_context, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, x_tab_content, outro_and_destroy_block, create_each_block, t1, get_each_context);
				check_outros();

				if (!each_value.length && each_1_else) {
					each_1_else.p(ctx, dirty);
				} else if (!each_value.length) {
					each_1_else = create_else_block$1(ctx);
					each_1_else.c();
					each_1_else.m(x_tab_content, t1);
				} else if (each_1_else) {
					each_1_else.d(1);
					each_1_else = null;
				}
			}

			if (/*loadingMore*/ ctx[11] || /*$next*/ ctx[16]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*loadingMore, $next*/ 67584) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(x_tab_content, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(topbar.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(topbar.$$.fragment, local);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(topbar, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(x_tab_content);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			if (each_1_else) each_1_else.d();
			if (if_block) if_block.d();
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(256:0) <Tab>",
		ctx
	});

	return block;
}

function create_fragment$a(ctx) {
	let title_value;
	let t;
	let current;

	document.title = title_value = "" + ((/*$mailbox*/ ctx[15].unseen
	? `(${/*$mailbox*/ ctx[15].unseen}) `
	: "") + /*meta*/ ctx[12].label);

	const tab = new Tab({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t = space();
			create_component(tab.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			mount_component(tab, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if ((!current || dirty[0] & /*$mailbox, meta*/ 36864) && title_value !== (title_value = "" + ((/*$mailbox*/ ctx[15].unseen
			? `(${/*$mailbox*/ ctx[15].unseen}) `
			: "") + /*meta*/ ctx[12].label))) {
				document.title = title_value;
			}

			const tab_changes = {};

			if (dirty[0] & /*$scroll, loadingMore, $next, $messages, mailbox, locale, $trans, $selection, selection, isTrash, isDraft, isJunk, isSent, reloadTimes*/ 487401 | dirty[1] & /*$$scope*/ 2048) {
				tab_changes.$$scope = { dirty, ctx };
			}

			tab.$set(tab_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tab.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tab.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			destroy_component(tab, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$a.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const func$1 = m => !m.get().seen;

function instance$a($$self, $$props, $$invalidate) {
	let $selection,
		$$unsubscribe_selection = noop,
		$$subscribe_selection = () => ($$unsubscribe_selection(), $$unsubscribe_selection = subscribe(selection, $$value => $$invalidate(13, $selection = $$value)), selection);

	let $messages,
		$$unsubscribe_messages = noop,
		$$subscribe_messages = () => ($$unsubscribe_messages(), $$unsubscribe_messages = subscribe(messages$1, $$value => $$invalidate(14, $messages = $$value)), messages$1);

	let $mailbox,
		$$unsubscribe_mailbox = noop,
		$$subscribe_mailbox = () => ($$unsubscribe_mailbox(), $$unsubscribe_mailbox = subscribe(mailbox, $$value => $$invalidate(15, $mailbox = $$value)), mailbox);

	let $next,
		$$unsubscribe_next = noop,
		$$subscribe_next = () => ($$unsubscribe_next(), $$unsubscribe_next = subscribe(next$1, $$value => $$invalidate(16, $next = $$value)), next$1);

	let $l;

	let $scroll,
		$$unsubscribe_scroll = noop,
		$$subscribe_scroll = () => ($$unsubscribe_scroll(), $$unsubscribe_scroll = subscribe(scroll, $$value => $$invalidate(17, $scroll = $$value)), scroll);

	let $trans;
	$$self.$$.on_destroy.push(() => $$unsubscribe_selection());
	$$self.$$.on_destroy.push(() => $$unsubscribe_messages());
	$$self.$$.on_destroy.push(() => $$unsubscribe_mailbox());
	$$self.$$.on_destroy.push(() => $$unsubscribe_next());
	$$self.$$.on_destroy.push(() => $$unsubscribe_scroll());
	let { mailbox } = $$props;
	validate_store(mailbox, "mailbox");
	$$subscribe_mailbox();
	let { messages: messages$1 } = $$props;
	validate_store(messages$1, "messages");
	$$subscribe_messages();
	let { next: next$1 } = $$props;
	validate_store(next$1, "next");
	$$subscribe_next();
	let { prev } = $$props;
	let { selection } = $$props;
	validate_store(selection, "selection");
	$$subscribe_selection();
	let { scroll } = $$props;
	validate_store(scroll, "scroll");
	$$subscribe_scroll();
	setContext("mailbox-selection", selection);
	let isJunk, isTrash, isDraft, isSent;

	const handleSelection = () => {
		selection.update($sel => {
			if ($selection.length !== $messages.length) {
				return $messages.slice();
			} else {
				return [];
			}
		});
	};

	const onSelectionMoved = () => {
		const selected = selection.get();
		messages$1.update(ms => ms.filter(m => !selected.includes(m)));
		selection.clear();

		if (messages$1.get().length < 10) {
			loadMore();
		}
	};

	const updateSeen$1 = async seen => {
		if ($selection.length) {
			$selection.forEach(m => m.update(m => ({ ...m, seen })));
			selection.invalidate();
			await updateSeen($mailbox.id, $selection.map(i => i.get().id), seen);
		}
	};

	const markAsSpam$1 = async value => {
		markAsSpam($mailbox.id, $selection.map(i => i.get().id), value);
		onSelectionMoved();
	};

	const del = async () => {
		_del($mailbox.id, $selection.map(i => i.get().id));
		onSelectionMoved();
	};

	let reloading = false;
	let reloadTimes = 0;

	const reload = async () => {
		if (reloading) return;
		$$invalidate(10, reloadTimes++, reloadTimes);
		reloading = true;
		const json = await list($mailbox.id);
		messages$1.set(json.messages.map(m => writable(m)));
		prev.set(json.prev);
		next$1.set(json.next);
		selection.clear();
		reloading = false;
	};

	let loadingMore = false;

	const loadMore = async () => {
		if (!$next) return;
		$$invalidate(11, loadingMore = true);
		const res = await next($mailbox.id, $next);
		messages$1.update(m => [...m, ...res.messages.map(m => writable(m))]);
		next$1.set(res.next);
		prev.set(res.prev);
		$$invalidate(11, loadingMore = false);
	};

	const flyInsert = (node, params) => {
		node.classList.add("removed");
		node.style.zIndex = "1";
		setTimeout(() => node.classList.remove("removed"), 1);
		setTimeout(() => node.style.zIndex = null, 150);
		return { duration: 150 };
	}; /*
return {
  easing: quadOut,
  ...params,
  css: (t, u) => `z-index: 1; opacity: ${t}; margin-block-end: -${u * h}px;`
}
*/

	const flyRemove = node => {
		node.classList.add("removed");
		return { duration: 150 };
	};

	const { locale: l, trans } = getContext("app");
	validate_store(l, "l");
	component_subscribe($$self, l, value => $$invalidate(32, $l = value));
	validate_store(trans, "trans");
	component_subscribe($$self, trans, value => $$invalidate(18, $trans = value));
	let { locale = $l } = $$props;
	let meta;
	const writable_props = ["mailbox", "messages", "next", "prev", "selection", "scroll", "locale"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Mailbox> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Mailbox", $$slots, []);
	const click_handler = () => updateSeen$1(true);
	const click_handler_1 = () => updateSeen$1(false);
	const click_handler_2 = () => markAsSpam$1(false);
	const click_handler_3 = () => markAsSpam$1(true);
	const click_handler_4 = () => del();
	const scroll_handler = event => set_store_value(scroll, $scroll = event.target.scrollTop);

	$$self.$set = $$props => {
		if ("mailbox" in $$props) $$subscribe_mailbox($$invalidate(0, mailbox = $$props.mailbox));
		if ("messages" in $$props) $$subscribe_messages($$invalidate(1, messages$1 = $$props.messages));
		if ("next" in $$props) $$subscribe_next($$invalidate(2, next$1 = $$props.next));
		if ("prev" in $$props) $$invalidate(30, prev = $$props.prev);
		if ("selection" in $$props) $$subscribe_selection($$invalidate(3, selection = $$props.selection));
		if ("scroll" in $$props) $$subscribe_scroll($$invalidate(4, scroll = $$props.scroll));
		if ("locale" in $$props) $$invalidate(5, locale = $$props.locale);
	};

	$$self.$capture_state = () => ({
		getContext,
		setContext,
		onMount,
		fade,
		flip,
		writable,
		Item: MailboxMessage,
		Tab,
		Topbar,
		Refresh,
		Delete,
		MarkUnSeen: MarkUnseen,
		MarkSeen,
		MarkSpam,
		UnMarkSpam,
		Resend,
		Reply,
		CheckAll: CheckboxMarked,
		CheckNone: CheckboxBlankOutline,
		CheckSome: CheckboxIntermediate,
		CheckCircle,
		Check,
		More: Plus,
		CircularProgress,
		Ripple: ge,
		MoveTo,
		mailbox,
		messages: messages$1,
		next: next$1,
		prev,
		selection,
		scroll,
		junk,
		trash,
		drafts,
		sent,
		mess: messages,
		isJunk,
		isTrash,
		isDraft,
		isSent,
		handleSelection,
		onSelectionMoved,
		updateSeen: updateSeen$1,
		markAsSpam: markAsSpam$1,
		del,
		list,
		reloading,
		reloadTimes,
		reload,
		loadingMore,
		loadMore,
		quadOut,
		flyInsert,
		flyRemove,
		l,
		trans,
		locale,
		mailboxMeta,
		meta,
		$selection,
		$messages,
		$mailbox,
		$next,
		$l,
		$scroll,
		$trans
	});

	$$self.$inject_state = $$props => {
		if ("mailbox" in $$props) $$subscribe_mailbox($$invalidate(0, mailbox = $$props.mailbox));
		if ("messages" in $$props) $$subscribe_messages($$invalidate(1, messages$1 = $$props.messages));
		if ("next" in $$props) $$subscribe_next($$invalidate(2, next$1 = $$props.next));
		if ("prev" in $$props) $$invalidate(30, prev = $$props.prev);
		if ("selection" in $$props) $$subscribe_selection($$invalidate(3, selection = $$props.selection));
		if ("scroll" in $$props) $$subscribe_scroll($$invalidate(4, scroll = $$props.scroll));
		if ("isJunk" in $$props) $$invalidate(6, isJunk = $$props.isJunk);
		if ("isTrash" in $$props) $$invalidate(7, isTrash = $$props.isTrash);
		if ("isDraft" in $$props) $$invalidate(8, isDraft = $$props.isDraft);
		if ("isSent" in $$props) $$invalidate(9, isSent = $$props.isSent);
		if ("reloading" in $$props) reloading = $$props.reloading;
		if ("reloadTimes" in $$props) $$invalidate(10, reloadTimes = $$props.reloadTimes);
		if ("loadingMore" in $$props) $$invalidate(11, loadingMore = $$props.loadingMore);
		if ("locale" in $$props) $$invalidate(5, locale = $$props.locale);
		if ("meta" in $$props) $$invalidate(12, meta = $$props.meta);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*mailbox*/ 1) {
			 $$invalidate(6, isJunk = mailbox === junk);
		}

		if ($$self.$$.dirty[0] & /*mailbox*/ 1) {
			 $$invalidate(7, isTrash = mailbox === trash);
		}

		if ($$self.$$.dirty[0] & /*mailbox*/ 1) {
			 $$invalidate(8, isDraft = mailbox === drafts);
		}

		if ($$self.$$.dirty[0] & /*mailbox*/ 1) {
			 $$invalidate(9, isSent = mailbox === sent);
		}

		if ($$self.$$.dirty[0] & /*$mailbox, locale*/ 32800) {
			 $$invalidate(12, meta = mailboxMeta($mailbox, locale.mailbox.title));
		}
	};

	return [
		mailbox,
		messages$1,
		next$1,
		selection,
		scroll,
		locale,
		isJunk,
		isTrash,
		isDraft,
		isSent,
		reloadTimes,
		loadingMore,
		meta,
		$selection,
		$messages,
		$mailbox,
		$next,
		$scroll,
		$trans,
		handleSelection,
		onSelectionMoved,
		updateSeen$1,
		markAsSpam$1,
		del,
		reload,
		loadMore,
		flyInsert,
		flyRemove,
		l,
		trans,
		prev,
		reloading,
		$l,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		scroll_handler
	];
}

class Mailbox extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$a,
			create_fragment$a,
			safe_not_equal,
			{
				mailbox: 0,
				messages: 1,
				next: 2,
				prev: 30,
				selection: 3,
				scroll: 4,
				locale: 5
			},
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Mailbox",
			options,
			id: create_fragment$a.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*mailbox*/ ctx[0] === undefined && !("mailbox" in props)) {
			console.warn("<Mailbox> was created without expected prop 'mailbox'");
		}

		if (/*messages*/ ctx[1] === undefined && !("messages" in props)) {
			console.warn("<Mailbox> was created without expected prop 'messages'");
		}

		if (/*next*/ ctx[2] === undefined && !("next" in props)) {
			console.warn("<Mailbox> was created without expected prop 'next'");
		}

		if (/*prev*/ ctx[30] === undefined && !("prev" in props)) {
			console.warn("<Mailbox> was created without expected prop 'prev'");
		}

		if (/*selection*/ ctx[3] === undefined && !("selection" in props)) {
			console.warn("<Mailbox> was created without expected prop 'selection'");
		}

		if (/*scroll*/ ctx[4] === undefined && !("scroll" in props)) {
			console.warn("<Mailbox> was created without expected prop 'scroll'");
		}
	}

	get mailbox() {
		throw new Error("<Mailbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set mailbox(value) {
		throw new Error("<Mailbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get messages() {
		throw new Error("<Mailbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set messages(value) {
		throw new Error("<Mailbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get next() {
		throw new Error("<Mailbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set next(value) {
		throw new Error("<Mailbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get prev() {
		throw new Error("<Mailbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set prev(value) {
		throw new Error("<Mailbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selection() {
		throw new Error("<Mailbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selection(value) {
		throw new Error("<Mailbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scroll() {
		throw new Error("<Mailbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scroll(value) {
		throw new Error("<Mailbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get locale() {
		throw new Error("<Mailbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set locale(value) {
		throw new Error("<Mailbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/lib/router/routes/Mailbox.svelte generated by Svelte v3.21.0 */

function create_fragment$b(ctx) {
	let current;

	const mailbox_1 = new Mailbox({
			props: {
				mailbox: /*mailbox*/ ctx[0],
				messages: /*messages*/ ctx[1],
				prev: /*prev*/ ctx[2],
				next: /*next*/ ctx[3],
				selection: /*selection*/ ctx[4],
				scroll: /*scroll*/ ctx[5]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(mailbox_1.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(mailbox_1, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const mailbox_1_changes = {};
			if (dirty & /*mailbox*/ 1) mailbox_1_changes.mailbox = /*mailbox*/ ctx[0];
			if (dirty & /*messages*/ 2) mailbox_1_changes.messages = /*messages*/ ctx[1];
			if (dirty & /*prev*/ 4) mailbox_1_changes.prev = /*prev*/ ctx[2];
			if (dirty & /*next*/ 8) mailbox_1_changes.next = /*next*/ ctx[3];
			if (dirty & /*selection*/ 16) mailbox_1_changes.selection = /*selection*/ ctx[4];
			if (dirty & /*scroll*/ 32) mailbox_1_changes.scroll = /*scroll*/ ctx[5];
			mailbox_1.$set(mailbox_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(mailbox_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(mailbox_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(mailbox_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$b.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload($page, { client }) {
	if (!user.get()) {
		return this.redirect("#!/login");
	}

	const mailbox = _get($page.params.mailbox);

	if (mailbox == null) {
		return this.error({
			code: 404,
			message: "La página no existe"
		});
	} else {
		const json = await list($page.params.mailbox);
		const messages = writable(json.messages.map(m => writable(m)));
		const next = writable(json.next);
		const prev = writable(json.prev);
		const selection = createSelection();
		const scroll = writable(0);

		return {
			mailbox,
			messages,
			prev,
			next,
			selection,
			scroll
		};
	}
}

function instance$b($$self, $$props, $$invalidate) {
	let { mailbox } = $$props;
	let { messages } = $$props;
	let { prev } = $$props;
	let { next } = $$props;
	let { selection } = $$props;
	let { scroll } = $$props;
	const writable_props = ["mailbox", "messages", "prev", "next", "selection", "scroll"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Mailbox> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Mailbox", $$slots, []);

	$$self.$set = $$props => {
		if ("mailbox" in $$props) $$invalidate(0, mailbox = $$props.mailbox);
		if ("messages" in $$props) $$invalidate(1, messages = $$props.messages);
		if ("prev" in $$props) $$invalidate(2, prev = $$props.prev);
		if ("next" in $$props) $$invalidate(3, next = $$props.next);
		if ("selection" in $$props) $$invalidate(4, selection = $$props.selection);
		if ("scroll" in $$props) $$invalidate(5, scroll = $$props.scroll);
	};

	$$self.$capture_state = () => ({
		user,
		get: _get,
		list,
		createSelection,
		preload,
		writable,
		Mailbox,
		mailbox,
		messages,
		prev,
		next,
		selection,
		scroll
	});

	$$self.$inject_state = $$props => {
		if ("mailbox" in $$props) $$invalidate(0, mailbox = $$props.mailbox);
		if ("messages" in $$props) $$invalidate(1, messages = $$props.messages);
		if ("prev" in $$props) $$invalidate(2, prev = $$props.prev);
		if ("next" in $$props) $$invalidate(3, next = $$props.next);
		if ("selection" in $$props) $$invalidate(4, selection = $$props.selection);
		if ("scroll" in $$props) $$invalidate(5, scroll = $$props.scroll);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [mailbox, messages, prev, next, selection, scroll];
}

class Mailbox_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
			mailbox: 0,
			messages: 1,
			prev: 2,
			next: 3,
			selection: 4,
			scroll: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Mailbox_1",
			options,
			id: create_fragment$b.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*mailbox*/ ctx[0] === undefined && !("mailbox" in props)) {
			console.warn("<Mailbox> was created without expected prop 'mailbox'");
		}

		if (/*messages*/ ctx[1] === undefined && !("messages" in props)) {
			console.warn("<Mailbox> was created without expected prop 'messages'");
		}

		if (/*prev*/ ctx[2] === undefined && !("prev" in props)) {
			console.warn("<Mailbox> was created without expected prop 'prev'");
		}

		if (/*next*/ ctx[3] === undefined && !("next" in props)) {
			console.warn("<Mailbox> was created without expected prop 'next'");
		}

		if (/*selection*/ ctx[4] === undefined && !("selection" in props)) {
			console.warn("<Mailbox> was created without expected prop 'selection'");
		}

		if (/*scroll*/ ctx[5] === undefined && !("scroll" in props)) {
			console.warn("<Mailbox> was created without expected prop 'scroll'");
		}
	}

	get mailbox() {
		throw new Error("<Mailbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set mailbox(value) {
		throw new Error("<Mailbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get messages() {
		throw new Error("<Mailbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set messages(value) {
		throw new Error("<Mailbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get prev() {
		throw new Error("<Mailbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set prev(value) {
		throw new Error("<Mailbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get next() {
		throw new Error("<Mailbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set next(value) {
		throw new Error("<Mailbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selection() {
		throw new Error("<Mailbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selection(value) {
		throw new Error("<Mailbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scroll() {
		throw new Error("<Mailbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scroll(value) {
		throw new Error("<Mailbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Mailbox_1;
export { preload };
//# sourceMappingURL=Mailbox-ef8f752b.js.map
